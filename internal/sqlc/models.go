// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AstBoolValues string

const (
	AstBoolValues0     AstBoolValues = "0"
	AstBoolValues1     AstBoolValues = "1"
	AstBoolValuesOff   AstBoolValues = "off"
	AstBoolValuesOn    AstBoolValues = "on"
	AstBoolValuesFalse AstBoolValues = "false"
	AstBoolValuesTrue  AstBoolValues = "true"
	AstBoolValuesNo    AstBoolValues = "no"
	AstBoolValuesYes   AstBoolValues = "yes"
)

func (e *AstBoolValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AstBoolValues(s)
	case string:
		*e = AstBoolValues(s)
	default:
		return fmt.Errorf("unsupported scan type for AstBoolValues: %T", src)
	}
	return nil
}

type NullAstBoolValues struct {
	AstBoolValues AstBoolValues `json:"ast_bool_values"`
	Valid         bool          `json:"valid"` // Valid is true if AstBoolValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAstBoolValues) Scan(value interface{}) error {
	if value == nil {
		ns.AstBoolValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AstBoolValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAstBoolValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AstBoolValues), nil
}

type IaxEncryptionValues string

const (
	IaxEncryptionValuesYes    IaxEncryptionValues = "yes"
	IaxEncryptionValuesNo     IaxEncryptionValues = "no"
	IaxEncryptionValuesAes128 IaxEncryptionValues = "aes128"
)

func (e *IaxEncryptionValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IaxEncryptionValues(s)
	case string:
		*e = IaxEncryptionValues(s)
	default:
		return fmt.Errorf("unsupported scan type for IaxEncryptionValues: %T", src)
	}
	return nil
}

type NullIaxEncryptionValues struct {
	IaxEncryptionValues IaxEncryptionValues `json:"iax_encryption_values"`
	Valid               bool                `json:"valid"` // Valid is true if IaxEncryptionValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIaxEncryptionValues) Scan(value interface{}) error {
	if value == nil {
		ns.IaxEncryptionValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IaxEncryptionValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIaxEncryptionValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IaxEncryptionValues), nil
}

type IaxRequirecalltokenValues string

const (
	IaxRequirecalltokenValuesYes  IaxRequirecalltokenValues = "yes"
	IaxRequirecalltokenValuesNo   IaxRequirecalltokenValues = "no"
	IaxRequirecalltokenValuesAuto IaxRequirecalltokenValues = "auto"
)

func (e *IaxRequirecalltokenValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IaxRequirecalltokenValues(s)
	case string:
		*e = IaxRequirecalltokenValues(s)
	default:
		return fmt.Errorf("unsupported scan type for IaxRequirecalltokenValues: %T", src)
	}
	return nil
}

type NullIaxRequirecalltokenValues struct {
	IaxRequirecalltokenValues IaxRequirecalltokenValues `json:"iax_requirecalltoken_values"`
	Valid                     bool                      `json:"valid"` // Valid is true if IaxRequirecalltokenValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIaxRequirecalltokenValues) Scan(value interface{}) error {
	if value == nil {
		ns.IaxRequirecalltokenValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IaxRequirecalltokenValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIaxRequirecalltokenValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IaxRequirecalltokenValues), nil
}

type IaxTransferValues string

const (
	IaxTransferValuesYes       IaxTransferValues = "yes"
	IaxTransferValuesNo        IaxTransferValues = "no"
	IaxTransferValuesMediaonly IaxTransferValues = "mediaonly"
)

func (e *IaxTransferValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IaxTransferValues(s)
	case string:
		*e = IaxTransferValues(s)
	default:
		return fmt.Errorf("unsupported scan type for IaxTransferValues: %T", src)
	}
	return nil
}

type NullIaxTransferValues struct {
	IaxTransferValues IaxTransferValues `json:"iax_transfer_values"`
	Valid             bool              `json:"valid"` // Valid is true if IaxTransferValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIaxTransferValues) Scan(value interface{}) error {
	if value == nil {
		ns.IaxTransferValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IaxTransferValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIaxTransferValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IaxTransferValues), nil
}

type MohModeValues string

const (
	MohModeValuesCustom     MohModeValues = "custom"
	MohModeValuesFiles      MohModeValues = "files"
	MohModeValuesMp3nb      MohModeValues = "mp3nb"
	MohModeValuesQuietmp3nb MohModeValues = "quietmp3nb"
	MohModeValuesQuietmp3   MohModeValues = "quietmp3"
	MohModeValuesPlaylist   MohModeValues = "playlist"
)

func (e *MohModeValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MohModeValues(s)
	case string:
		*e = MohModeValues(s)
	default:
		return fmt.Errorf("unsupported scan type for MohModeValues: %T", src)
	}
	return nil
}

type NullMohModeValues struct {
	MohModeValues MohModeValues `json:"moh_mode_values"`
	Valid         bool          `json:"valid"` // Valid is true if MohModeValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMohModeValues) Scan(value interface{}) error {
	if value == nil {
		ns.MohModeValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MohModeValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMohModeValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MohModeValues), nil
}

type Pjsip100relValuesV2 string

const (
	Pjsip100relValuesV2No            Pjsip100relValuesV2 = "no"
	Pjsip100relValuesV2Required      Pjsip100relValuesV2 = "required"
	Pjsip100relValuesV2PeerSupported Pjsip100relValuesV2 = "peer_supported"
	Pjsip100relValuesV2Yes           Pjsip100relValuesV2 = "yes"
)

func (e *Pjsip100relValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Pjsip100relValuesV2(s)
	case string:
		*e = Pjsip100relValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for Pjsip100relValuesV2: %T", src)
	}
	return nil
}

type NullPjsip100relValuesV2 struct {
	Pjsip100relValuesV2 Pjsip100relValuesV2 `json:"pjsip_100rel_values_v2"`
	Valid               bool                `json:"valid"` // Valid is true if Pjsip100relValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsip100relValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.Pjsip100relValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Pjsip100relValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsip100relValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Pjsip100relValuesV2), nil
}

type PjsipAuthTypeValuesV2 string

const (
	PjsipAuthTypeValuesV2Md5         PjsipAuthTypeValuesV2 = "md5"
	PjsipAuthTypeValuesV2Userpass    PjsipAuthTypeValuesV2 = "userpass"
	PjsipAuthTypeValuesV2GoogleOauth PjsipAuthTypeValuesV2 = "google_oauth"
)

func (e *PjsipAuthTypeValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipAuthTypeValuesV2(s)
	case string:
		*e = PjsipAuthTypeValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipAuthTypeValuesV2: %T", src)
	}
	return nil
}

type NullPjsipAuthTypeValuesV2 struct {
	PjsipAuthTypeValuesV2 PjsipAuthTypeValuesV2 `json:"pjsip_auth_type_values_v2"`
	Valid                 bool                  `json:"valid"` // Valid is true if PjsipAuthTypeValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipAuthTypeValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipAuthTypeValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipAuthTypeValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipAuthTypeValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipAuthTypeValuesV2), nil
}

type PjsipCidPrivacyValues string

const (
	PjsipCidPrivacyValuesAllowedNotScreened    PjsipCidPrivacyValues = "allowed_not_screened"
	PjsipCidPrivacyValuesAllowedPassedScreened PjsipCidPrivacyValues = "allowed_passed_screened"
	PjsipCidPrivacyValuesAllowedFailedScreened PjsipCidPrivacyValues = "allowed_failed_screened"
	PjsipCidPrivacyValuesAllowed               PjsipCidPrivacyValues = "allowed"
	PjsipCidPrivacyValuesProhibNotScreened     PjsipCidPrivacyValues = "prohib_not_screened"
	PjsipCidPrivacyValuesProhibPassedScreened  PjsipCidPrivacyValues = "prohib_passed_screened"
	PjsipCidPrivacyValuesProhibFailedScreened  PjsipCidPrivacyValues = "prohib_failed_screened"
	PjsipCidPrivacyValuesProhib                PjsipCidPrivacyValues = "prohib"
	PjsipCidPrivacyValuesUnavailable           PjsipCidPrivacyValues = "unavailable"
)

func (e *PjsipCidPrivacyValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipCidPrivacyValues(s)
	case string:
		*e = PjsipCidPrivacyValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipCidPrivacyValues: %T", src)
	}
	return nil
}

type NullPjsipCidPrivacyValues struct {
	PjsipCidPrivacyValues PjsipCidPrivacyValues `json:"pjsip_cid_privacy_values"`
	Valid                 bool                  `json:"valid"` // Valid is true if PjsipCidPrivacyValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipCidPrivacyValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipCidPrivacyValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipCidPrivacyValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipCidPrivacyValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipCidPrivacyValues), nil
}

type PjsipConnectedLineMethodValues string

const (
	PjsipConnectedLineMethodValuesInvite   PjsipConnectedLineMethodValues = "invite"
	PjsipConnectedLineMethodValuesReinvite PjsipConnectedLineMethodValues = "reinvite"
	PjsipConnectedLineMethodValuesUpdate   PjsipConnectedLineMethodValues = "update"
)

func (e *PjsipConnectedLineMethodValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipConnectedLineMethodValues(s)
	case string:
		*e = PjsipConnectedLineMethodValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipConnectedLineMethodValues: %T", src)
	}
	return nil
}

type NullPjsipConnectedLineMethodValues struct {
	PjsipConnectedLineMethodValues PjsipConnectedLineMethodValues `json:"pjsip_connected_line_method_values"`
	Valid                          bool                           `json:"valid"` // Valid is true if PjsipConnectedLineMethodValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipConnectedLineMethodValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipConnectedLineMethodValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipConnectedLineMethodValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipConnectedLineMethodValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipConnectedLineMethodValues), nil
}

type PjsipDirectMediaGlareMitigationValues string

const (
	PjsipDirectMediaGlareMitigationValuesNone     PjsipDirectMediaGlareMitigationValues = "none"
	PjsipDirectMediaGlareMitigationValuesOutgoing PjsipDirectMediaGlareMitigationValues = "outgoing"
	PjsipDirectMediaGlareMitigationValuesIncoming PjsipDirectMediaGlareMitigationValues = "incoming"
)

func (e *PjsipDirectMediaGlareMitigationValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipDirectMediaGlareMitigationValues(s)
	case string:
		*e = PjsipDirectMediaGlareMitigationValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipDirectMediaGlareMitigationValues: %T", src)
	}
	return nil
}

type NullPjsipDirectMediaGlareMitigationValues struct {
	PjsipDirectMediaGlareMitigationValues PjsipDirectMediaGlareMitigationValues `json:"pjsip_direct_media_glare_mitigation_values"`
	Valid                                 bool                                  `json:"valid"` // Valid is true if PjsipDirectMediaGlareMitigationValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipDirectMediaGlareMitigationValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipDirectMediaGlareMitigationValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipDirectMediaGlareMitigationValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipDirectMediaGlareMitigationValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipDirectMediaGlareMitigationValues), nil
}

type PjsipDtlsSetupValues string

const (
	PjsipDtlsSetupValuesActive  PjsipDtlsSetupValues = "active"
	PjsipDtlsSetupValuesPassive PjsipDtlsSetupValues = "passive"
	PjsipDtlsSetupValuesActpass PjsipDtlsSetupValues = "actpass"
)

func (e *PjsipDtlsSetupValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipDtlsSetupValues(s)
	case string:
		*e = PjsipDtlsSetupValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipDtlsSetupValues: %T", src)
	}
	return nil
}

type NullPjsipDtlsSetupValues struct {
	PjsipDtlsSetupValues PjsipDtlsSetupValues `json:"pjsip_dtls_setup_values"`
	Valid                bool                 `json:"valid"` // Valid is true if PjsipDtlsSetupValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipDtlsSetupValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipDtlsSetupValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipDtlsSetupValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipDtlsSetupValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipDtlsSetupValues), nil
}

type PjsipDtmfModeValuesV3 string

const (
	PjsipDtmfModeValuesV3Rfc4733  PjsipDtmfModeValuesV3 = "rfc4733"
	PjsipDtmfModeValuesV3Inband   PjsipDtmfModeValuesV3 = "inband"
	PjsipDtmfModeValuesV3Info     PjsipDtmfModeValuesV3 = "info"
	PjsipDtmfModeValuesV3Auto     PjsipDtmfModeValuesV3 = "auto"
	PjsipDtmfModeValuesV3AutoInfo PjsipDtmfModeValuesV3 = "auto_info"
)

func (e *PjsipDtmfModeValuesV3) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipDtmfModeValuesV3(s)
	case string:
		*e = PjsipDtmfModeValuesV3(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipDtmfModeValuesV3: %T", src)
	}
	return nil
}

type NullPjsipDtmfModeValuesV3 struct {
	PjsipDtmfModeValuesV3 PjsipDtmfModeValuesV3 `json:"pjsip_dtmf_mode_values_v3"`
	Valid                 bool                  `json:"valid"` // Valid is true if PjsipDtmfModeValuesV3 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipDtmfModeValuesV3) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipDtmfModeValuesV3, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipDtmfModeValuesV3.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipDtmfModeValuesV3) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipDtmfModeValuesV3), nil
}

type PjsipIncomingCallOfferPrefValues string

const (
	PjsipIncomingCallOfferPrefValuesLocal       PjsipIncomingCallOfferPrefValues = "local"
	PjsipIncomingCallOfferPrefValuesLocalFirst  PjsipIncomingCallOfferPrefValues = "local_first"
	PjsipIncomingCallOfferPrefValuesRemote      PjsipIncomingCallOfferPrefValues = "remote"
	PjsipIncomingCallOfferPrefValuesRemoteFirst PjsipIncomingCallOfferPrefValues = "remote_first"
)

func (e *PjsipIncomingCallOfferPrefValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipIncomingCallOfferPrefValues(s)
	case string:
		*e = PjsipIncomingCallOfferPrefValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipIncomingCallOfferPrefValues: %T", src)
	}
	return nil
}

type NullPjsipIncomingCallOfferPrefValues struct {
	PjsipIncomingCallOfferPrefValues PjsipIncomingCallOfferPrefValues `json:"pjsip_incoming_call_offer_pref_values"`
	Valid                            bool                             `json:"valid"` // Valid is true if PjsipIncomingCallOfferPrefValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipIncomingCallOfferPrefValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipIncomingCallOfferPrefValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipIncomingCallOfferPrefValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipIncomingCallOfferPrefValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipIncomingCallOfferPrefValues), nil
}

type PjsipMediaEncryptionValues string

const (
	PjsipMediaEncryptionValuesNo   PjsipMediaEncryptionValues = "no"
	PjsipMediaEncryptionValuesSdes PjsipMediaEncryptionValues = "sdes"
	PjsipMediaEncryptionValuesDtls PjsipMediaEncryptionValues = "dtls"
)

func (e *PjsipMediaEncryptionValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipMediaEncryptionValues(s)
	case string:
		*e = PjsipMediaEncryptionValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipMediaEncryptionValues: %T", src)
	}
	return nil
}

type NullPjsipMediaEncryptionValues struct {
	PjsipMediaEncryptionValues PjsipMediaEncryptionValues `json:"pjsip_media_encryption_values"`
	Valid                      bool                       `json:"valid"` // Valid is true if PjsipMediaEncryptionValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipMediaEncryptionValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipMediaEncryptionValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipMediaEncryptionValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipMediaEncryptionValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipMediaEncryptionValues), nil
}

type PjsipOutgoingCallOfferPrefValues string

const (
	PjsipOutgoingCallOfferPrefValuesLocal       PjsipOutgoingCallOfferPrefValues = "local"
	PjsipOutgoingCallOfferPrefValuesLocalMerge  PjsipOutgoingCallOfferPrefValues = "local_merge"
	PjsipOutgoingCallOfferPrefValuesLocalFirst  PjsipOutgoingCallOfferPrefValues = "local_first"
	PjsipOutgoingCallOfferPrefValuesRemote      PjsipOutgoingCallOfferPrefValues = "remote"
	PjsipOutgoingCallOfferPrefValuesRemoteMerge PjsipOutgoingCallOfferPrefValues = "remote_merge"
	PjsipOutgoingCallOfferPrefValuesRemoteFirst PjsipOutgoingCallOfferPrefValues = "remote_first"
)

func (e *PjsipOutgoingCallOfferPrefValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipOutgoingCallOfferPrefValues(s)
	case string:
		*e = PjsipOutgoingCallOfferPrefValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipOutgoingCallOfferPrefValues: %T", src)
	}
	return nil
}

type NullPjsipOutgoingCallOfferPrefValues struct {
	PjsipOutgoingCallOfferPrefValues PjsipOutgoingCallOfferPrefValues `json:"pjsip_outgoing_call_offer_pref_values"`
	Valid                            bool                             `json:"valid"` // Valid is true if PjsipOutgoingCallOfferPrefValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipOutgoingCallOfferPrefValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipOutgoingCallOfferPrefValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipOutgoingCallOfferPrefValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipOutgoingCallOfferPrefValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipOutgoingCallOfferPrefValues), nil
}

type PjsipRedirectMethodValues string

const (
	PjsipRedirectMethodValuesUser     PjsipRedirectMethodValues = "user"
	PjsipRedirectMethodValuesUriCore  PjsipRedirectMethodValues = "uri_core"
	PjsipRedirectMethodValuesUriPjsip PjsipRedirectMethodValues = "uri_pjsip"
)

func (e *PjsipRedirectMethodValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipRedirectMethodValues(s)
	case string:
		*e = PjsipRedirectMethodValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipRedirectMethodValues: %T", src)
	}
	return nil
}

type NullPjsipRedirectMethodValues struct {
	PjsipRedirectMethodValues PjsipRedirectMethodValues `json:"pjsip_redirect_method_values"`
	Valid                     bool                      `json:"valid"` // Valid is true if PjsipRedirectMethodValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipRedirectMethodValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipRedirectMethodValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipRedirectMethodValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipRedirectMethodValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipRedirectMethodValues), nil
}

type PjsipT38udptlEcValues string

const (
	PjsipT38udptlEcValuesNone       PjsipT38udptlEcValues = "none"
	PjsipT38udptlEcValuesFec        PjsipT38udptlEcValues = "fec"
	PjsipT38udptlEcValuesRedundancy PjsipT38udptlEcValues = "redundancy"
)

func (e *PjsipT38udptlEcValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipT38udptlEcValues(s)
	case string:
		*e = PjsipT38udptlEcValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipT38udptlEcValues: %T", src)
	}
	return nil
}

type NullPjsipT38udptlEcValues struct {
	PjsipT38udptlEcValues PjsipT38udptlEcValues `json:"pjsip_t38udptl_ec_values"`
	Valid                 bool                  `json:"valid"` // Valid is true if PjsipT38udptlEcValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipT38udptlEcValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipT38udptlEcValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipT38udptlEcValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipT38udptlEcValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipT38udptlEcValues), nil
}

type PjsipTaskprocessorOverloadTriggerValues string

const (
	PjsipTaskprocessorOverloadTriggerValuesNone      PjsipTaskprocessorOverloadTriggerValues = "none"
	PjsipTaskprocessorOverloadTriggerValuesGlobal    PjsipTaskprocessorOverloadTriggerValues = "global"
	PjsipTaskprocessorOverloadTriggerValuesPjsipOnly PjsipTaskprocessorOverloadTriggerValues = "pjsip_only"
)

func (e *PjsipTaskprocessorOverloadTriggerValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTaskprocessorOverloadTriggerValues(s)
	case string:
		*e = PjsipTaskprocessorOverloadTriggerValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTaskprocessorOverloadTriggerValues: %T", src)
	}
	return nil
}

type NullPjsipTaskprocessorOverloadTriggerValues struct {
	PjsipTaskprocessorOverloadTriggerValues PjsipTaskprocessorOverloadTriggerValues `json:"pjsip_taskprocessor_overload_trigger_values"`
	Valid                                   bool                                    `json:"valid"` // Valid is true if PjsipTaskprocessorOverloadTriggerValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTaskprocessorOverloadTriggerValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTaskprocessorOverloadTriggerValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTaskprocessorOverloadTriggerValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTaskprocessorOverloadTriggerValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTaskprocessorOverloadTriggerValues), nil
}

type PjsipTimerValues string

const (
	PjsipTimerValuesForced   PjsipTimerValues = "forced"
	PjsipTimerValuesNo       PjsipTimerValues = "no"
	PjsipTimerValuesRequired PjsipTimerValues = "required"
	PjsipTimerValuesYes      PjsipTimerValues = "yes"
)

func (e *PjsipTimerValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTimerValues(s)
	case string:
		*e = PjsipTimerValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTimerValues: %T", src)
	}
	return nil
}

type NullPjsipTimerValues struct {
	PjsipTimerValues PjsipTimerValues `json:"pjsip_timer_values"`
	Valid            bool             `json:"valid"` // Valid is true if PjsipTimerValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTimerValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTimerValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTimerValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTimerValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTimerValues), nil
}

type PjsipTransportMethodValuesV2 string

const (
	PjsipTransportMethodValuesV2Default     PjsipTransportMethodValuesV2 = "default"
	PjsipTransportMethodValuesV2Unspecified PjsipTransportMethodValuesV2 = "unspecified"
	PjsipTransportMethodValuesV2Tlsv1       PjsipTransportMethodValuesV2 = "tlsv1"
	PjsipTransportMethodValuesV2Tlsv11      PjsipTransportMethodValuesV2 = "tlsv1_1"
	PjsipTransportMethodValuesV2Tlsv12      PjsipTransportMethodValuesV2 = "tlsv1_2"
	PjsipTransportMethodValuesV2Tlsv13      PjsipTransportMethodValuesV2 = "tlsv1_3"
	PjsipTransportMethodValuesV2Sslv2       PjsipTransportMethodValuesV2 = "sslv2"
	PjsipTransportMethodValuesV2Sslv23      PjsipTransportMethodValuesV2 = "sslv23"
	PjsipTransportMethodValuesV2Sslv3       PjsipTransportMethodValuesV2 = "sslv3"
)

func (e *PjsipTransportMethodValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTransportMethodValuesV2(s)
	case string:
		*e = PjsipTransportMethodValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTransportMethodValuesV2: %T", src)
	}
	return nil
}

type NullPjsipTransportMethodValuesV2 struct {
	PjsipTransportMethodValuesV2 PjsipTransportMethodValuesV2 `json:"pjsip_transport_method_values_v2"`
	Valid                        bool                         `json:"valid"` // Valid is true if PjsipTransportMethodValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTransportMethodValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTransportMethodValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTransportMethodValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTransportMethodValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTransportMethodValuesV2), nil
}

type PjsipTransportProtocolValuesV2 string

const (
	PjsipTransportProtocolValuesV2Udp  PjsipTransportProtocolValuesV2 = "udp"
	PjsipTransportProtocolValuesV2Tcp  PjsipTransportProtocolValuesV2 = "tcp"
	PjsipTransportProtocolValuesV2Tls  PjsipTransportProtocolValuesV2 = "tls"
	PjsipTransportProtocolValuesV2Ws   PjsipTransportProtocolValuesV2 = "ws"
	PjsipTransportProtocolValuesV2Wss  PjsipTransportProtocolValuesV2 = "wss"
	PjsipTransportProtocolValuesV2Flow PjsipTransportProtocolValuesV2 = "flow"
)

func (e *PjsipTransportProtocolValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTransportProtocolValuesV2(s)
	case string:
		*e = PjsipTransportProtocolValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTransportProtocolValuesV2: %T", src)
	}
	return nil
}

type NullPjsipTransportProtocolValuesV2 struct {
	PjsipTransportProtocolValuesV2 PjsipTransportProtocolValuesV2 `json:"pjsip_transport_protocol_values_v2"`
	Valid                          bool                           `json:"valid"` // Valid is true if PjsipTransportProtocolValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTransportProtocolValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTransportProtocolValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTransportProtocolValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTransportProtocolValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTransportProtocolValuesV2), nil
}

type QueueAutopauseValues string

const (
	QueueAutopauseValuesYes QueueAutopauseValues = "yes"
	QueueAutopauseValuesNo  QueueAutopauseValues = "no"
	QueueAutopauseValuesAll QueueAutopauseValues = "all"
)

func (e *QueueAutopauseValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QueueAutopauseValues(s)
	case string:
		*e = QueueAutopauseValues(s)
	default:
		return fmt.Errorf("unsupported scan type for QueueAutopauseValues: %T", src)
	}
	return nil
}

type NullQueueAutopauseValues struct {
	QueueAutopauseValues QueueAutopauseValues `json:"queue_autopause_values"`
	Valid                bool                 `json:"valid"` // Valid is true if QueueAutopauseValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQueueAutopauseValues) Scan(value interface{}) error {
	if value == nil {
		ns.QueueAutopauseValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QueueAutopauseValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQueueAutopauseValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QueueAutopauseValues), nil
}

type QueueStrategyValues string

const (
	QueueStrategyValuesRingall     QueueStrategyValues = "ringall"
	QueueStrategyValuesLeastrecent QueueStrategyValues = "leastrecent"
	QueueStrategyValuesFewestcalls QueueStrategyValues = "fewestcalls"
	QueueStrategyValuesRandom      QueueStrategyValues = "random"
	QueueStrategyValuesRrmemory    QueueStrategyValues = "rrmemory"
	QueueStrategyValuesLinear      QueueStrategyValues = "linear"
	QueueStrategyValuesWrandom     QueueStrategyValues = "wrandom"
	QueueStrategyValuesRrordered   QueueStrategyValues = "rrordered"
)

func (e *QueueStrategyValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QueueStrategyValues(s)
	case string:
		*e = QueueStrategyValues(s)
	default:
		return fmt.Errorf("unsupported scan type for QueueStrategyValues: %T", src)
	}
	return nil
}

type NullQueueStrategyValues struct {
	QueueStrategyValues QueueStrategyValues `json:"queue_strategy_values"`
	Valid               bool                `json:"valid"` // Valid is true if QueueStrategyValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQueueStrategyValues) Scan(value interface{}) error {
	if value == nil {
		ns.QueueStrategyValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QueueStrategyValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQueueStrategyValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QueueStrategyValues), nil
}

type SecurityNegotiationValues string

const (
	SecurityNegotiationValuesNo       SecurityNegotiationValues = "no"
	SecurityNegotiationValuesMediasec SecurityNegotiationValues = "mediasec"
)

func (e *SecurityNegotiationValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SecurityNegotiationValues(s)
	case string:
		*e = SecurityNegotiationValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SecurityNegotiationValues: %T", src)
	}
	return nil
}

type NullSecurityNegotiationValues struct {
	SecurityNegotiationValues SecurityNegotiationValues `json:"security_negotiation_values"`
	Valid                     bool                      `json:"valid"` // Valid is true if SecurityNegotiationValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSecurityNegotiationValues) Scan(value interface{}) error {
	if value == nil {
		ns.SecurityNegotiationValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SecurityNegotiationValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSecurityNegotiationValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SecurityNegotiationValues), nil
}

type ShaHashValues string

const (
	ShaHashValuesSHA1   ShaHashValues = "SHA-1"
	ShaHashValuesSHA256 ShaHashValues = "SHA-256"
)

func (e *ShaHashValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShaHashValues(s)
	case string:
		*e = ShaHashValues(s)
	default:
		return fmt.Errorf("unsupported scan type for ShaHashValues: %T", src)
	}
	return nil
}

type NullShaHashValues struct {
	ShaHashValues ShaHashValues `json:"sha_hash_values"`
	Valid         bool          `json:"valid"` // Valid is true if ShaHashValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShaHashValues) Scan(value interface{}) error {
	if value == nil {
		ns.ShaHashValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShaHashValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShaHashValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShaHashValues), nil
}

type SipCallingpresValues string

const (
	SipCallingpresValuesAllowedNotScreened  SipCallingpresValues = "allowed_not_screened"
	SipCallingpresValuesAllowedPassedScreen SipCallingpresValues = "allowed_passed_screen"
	SipCallingpresValuesAllowedFailedScreen SipCallingpresValues = "allowed_failed_screen"
	SipCallingpresValuesAllowed             SipCallingpresValues = "allowed"
	SipCallingpresValuesProhibNotScreened   SipCallingpresValues = "prohib_not_screened"
	SipCallingpresValuesProhibPassedScreen  SipCallingpresValues = "prohib_passed_screen"
	SipCallingpresValuesProhibFailedScreen  SipCallingpresValues = "prohib_failed_screen"
	SipCallingpresValuesProhib              SipCallingpresValues = "prohib"
)

func (e *SipCallingpresValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipCallingpresValues(s)
	case string:
		*e = SipCallingpresValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipCallingpresValues: %T", src)
	}
	return nil
}

type NullSipCallingpresValues struct {
	SipCallingpresValues SipCallingpresValues `json:"sip_callingpres_values"`
	Valid                bool                 `json:"valid"` // Valid is true if SipCallingpresValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipCallingpresValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipCallingpresValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipCallingpresValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipCallingpresValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipCallingpresValues), nil
}

type SipDirectmediaValuesV2 string

const (
	SipDirectmediaValuesV2Yes      SipDirectmediaValuesV2 = "yes"
	SipDirectmediaValuesV2No       SipDirectmediaValuesV2 = "no"
	SipDirectmediaValuesV2Nonat    SipDirectmediaValuesV2 = "nonat"
	SipDirectmediaValuesV2Update   SipDirectmediaValuesV2 = "update"
	SipDirectmediaValuesV2Outgoing SipDirectmediaValuesV2 = "outgoing"
)

func (e *SipDirectmediaValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipDirectmediaValuesV2(s)
	case string:
		*e = SipDirectmediaValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for SipDirectmediaValuesV2: %T", src)
	}
	return nil
}

type NullSipDirectmediaValuesV2 struct {
	SipDirectmediaValuesV2 SipDirectmediaValuesV2 `json:"sip_directmedia_values_v2"`
	Valid                  bool                   `json:"valid"` // Valid is true if SipDirectmediaValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipDirectmediaValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.SipDirectmediaValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipDirectmediaValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipDirectmediaValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipDirectmediaValuesV2), nil
}

type SipDtmfmodeValues string

const (
	SipDtmfmodeValuesRfc2833   SipDtmfmodeValues = "rfc2833"
	SipDtmfmodeValuesInfo      SipDtmfmodeValues = "info"
	SipDtmfmodeValuesShortinfo SipDtmfmodeValues = "shortinfo"
	SipDtmfmodeValuesInband    SipDtmfmodeValues = "inband"
	SipDtmfmodeValuesAuto      SipDtmfmodeValues = "auto"
)

func (e *SipDtmfmodeValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipDtmfmodeValues(s)
	case string:
		*e = SipDtmfmodeValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipDtmfmodeValues: %T", src)
	}
	return nil
}

type NullSipDtmfmodeValues struct {
	SipDtmfmodeValues SipDtmfmodeValues `json:"sip_dtmfmode_values"`
	Valid             bool              `json:"valid"` // Valid is true if SipDtmfmodeValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipDtmfmodeValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipDtmfmodeValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipDtmfmodeValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipDtmfmodeValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipDtmfmodeValues), nil
}

type SipProgressinbandValues string

const (
	SipProgressinbandValuesYes   SipProgressinbandValues = "yes"
	SipProgressinbandValuesNo    SipProgressinbandValues = "no"
	SipProgressinbandValuesNever SipProgressinbandValues = "never"
)

func (e *SipProgressinbandValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipProgressinbandValues(s)
	case string:
		*e = SipProgressinbandValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipProgressinbandValues: %T", src)
	}
	return nil
}

type NullSipProgressinbandValues struct {
	SipProgressinbandValues SipProgressinbandValues `json:"sip_progressinband_values"`
	Valid                   bool                    `json:"valid"` // Valid is true if SipProgressinbandValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipProgressinbandValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipProgressinbandValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipProgressinbandValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipProgressinbandValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipProgressinbandValues), nil
}

type SipSessionRefresherValues string

const (
	SipSessionRefresherValuesUac SipSessionRefresherValues = "uac"
	SipSessionRefresherValuesUas SipSessionRefresherValues = "uas"
)

func (e *SipSessionRefresherValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipSessionRefresherValues(s)
	case string:
		*e = SipSessionRefresherValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipSessionRefresherValues: %T", src)
	}
	return nil
}

type NullSipSessionRefresherValues struct {
	SipSessionRefresherValues SipSessionRefresherValues `json:"sip_session_refresher_values"`
	Valid                     bool                      `json:"valid"` // Valid is true if SipSessionRefresherValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipSessionRefresherValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipSessionRefresherValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipSessionRefresherValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipSessionRefresherValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipSessionRefresherValues), nil
}

type SipSessionTimersValues string

const (
	SipSessionTimersValuesAccept    SipSessionTimersValues = "accept"
	SipSessionTimersValuesRefuse    SipSessionTimersValues = "refuse"
	SipSessionTimersValuesOriginate SipSessionTimersValues = "originate"
)

func (e *SipSessionTimersValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipSessionTimersValues(s)
	case string:
		*e = SipSessionTimersValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipSessionTimersValues: %T", src)
	}
	return nil
}

type NullSipSessionTimersValues struct {
	SipSessionTimersValues SipSessionTimersValues `json:"sip_session_timers_values"`
	Valid                  bool                   `json:"valid"` // Valid is true if SipSessionTimersValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipSessionTimersValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipSessionTimersValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipSessionTimersValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipSessionTimersValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipSessionTimersValues), nil
}

type SipTransportValues string

const (
	SipTransportValuesUdp    SipTransportValues = "udp"
	SipTransportValuesTcp    SipTransportValues = "tcp"
	SipTransportValuesTls    SipTransportValues = "tls"
	SipTransportValuesWs     SipTransportValues = "ws"
	SipTransportValuesWss    SipTransportValues = "wss"
	SipTransportValuesUdptcp SipTransportValues = "udp,tcp"
	SipTransportValuesTcpudp SipTransportValues = "tcp,udp"
)

func (e *SipTransportValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipTransportValues(s)
	case string:
		*e = SipTransportValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipTransportValues: %T", src)
	}
	return nil
}

type NullSipTransportValues struct {
	SipTransportValues SipTransportValues `json:"sip_transport_values"`
	Valid              bool               `json:"valid"` // Valid is true if SipTransportValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipTransportValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipTransportValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipTransportValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipTransportValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipTransportValues), nil
}

type TypeValues string

const (
	TypeValuesFriend TypeValues = "friend"
	TypeValuesUser   TypeValues = "user"
	TypeValuesPeer   TypeValues = "peer"
)

func (e *TypeValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeValues(s)
	case string:
		*e = TypeValues(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeValues: %T", src)
	}
	return nil
}

type NullTypeValues struct {
	TypeValues TypeValues `json:"type_values"`
	Valid      bool       `json:"valid"` // Valid is true if TypeValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeValues) Scan(value interface{}) error {
	if value == nil {
		ns.TypeValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeValues), nil
}

type YesNoValues string

const (
	YesNoValuesYes YesNoValues = "yes"
	YesNoValuesNo  YesNoValues = "no"
)

func (e *YesNoValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = YesNoValues(s)
	case string:
		*e = YesNoValues(s)
	default:
		return fmt.Errorf("unsupported scan type for YesNoValues: %T", src)
	}
	return nil
}

type NullYesNoValues struct {
	YesNoValues YesNoValues `json:"yes_no_values"`
	Valid       bool        `json:"valid"` // Valid is true if YesNoValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullYesNoValues) Scan(value interface{}) error {
	if value == nil {
		ns.YesNoValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.YesNoValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullYesNoValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.YesNoValues), nil
}

type YesnoValues string

const (
	YesnoValuesYes YesnoValues = "yes"
	YesnoValuesNo  YesnoValues = "no"
)

func (e *YesnoValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = YesnoValues(s)
	case string:
		*e = YesnoValues(s)
	default:
		return fmt.Errorf("unsupported scan type for YesnoValues: %T", src)
	}
	return nil
}

type NullYesnoValues struct {
	YesnoValues YesnoValues `json:"yesno_values"`
	Valid       bool        `json:"valid"` // Valid is true if YesnoValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullYesnoValues) Scan(value interface{}) error {
	if value == nil {
		ns.YesnoValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.YesnoValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullYesnoValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.YesnoValues), nil
}

type AlembicVersion struct {
	VersionNum string `json:"version_num"`
}

type Cdr struct {
	Accountcode pgtype.Text      `json:"accountcode"`
	Src         pgtype.Text      `json:"src"`
	Dst         pgtype.Text      `json:"dst"`
	Dcontext    pgtype.Text      `json:"dcontext"`
	Clid        pgtype.Text      `json:"clid"`
	Channel     pgtype.Text      `json:"channel"`
	Dstchannel  pgtype.Text      `json:"dstchannel"`
	Lastapp     pgtype.Text      `json:"lastapp"`
	Lastdata    pgtype.Text      `json:"lastdata"`
	Cstart      pgtype.Timestamp `json:"cstart"`
	Answer      pgtype.Timestamp `json:"answer"`
	Cend        pgtype.Timestamp `json:"cend"`
	Duration    pgtype.Int4      `json:"duration"`
	Billsec     pgtype.Int4      `json:"billsec"`
	Disposition pgtype.Text      `json:"disposition"`
	Amaflags    pgtype.Text      `json:"amaflags"`
	Userfield   pgtype.Text      `json:"userfield"`
	Uniqueid    pgtype.Text      `json:"uniqueid"`
	Linkedid    pgtype.Text      `json:"linkedid"`
	Peeraccount pgtype.Text      `json:"peeraccount"`
	Sequence    pgtype.Int4      `json:"sequence"`
}

type Extension struct {
	ID       int64  `json:"id"`
	Context  string `json:"context"`
	Exten    string `json:"exten"`
	Priority int32  `json:"priority"`
	App      string `json:"app"`
	Appdata  string `json:"appdata"`
}

type Iaxfriend struct {
	ID                int32                         `json:"id"`
	Name              string                        `json:"name"`
	Type              NullTypeValues                `json:"type"`
	Username          pgtype.Text                   `json:"username"`
	Mailbox           pgtype.Text                   `json:"mailbox"`
	Secret            pgtype.Text                   `json:"secret"`
	Dbsecret          pgtype.Text                   `json:"dbsecret"`
	Context           pgtype.Text                   `json:"context"`
	Regcontext        pgtype.Text                   `json:"regcontext"`
	Host              pgtype.Text                   `json:"host"`
	Ipaddr            pgtype.Text                   `json:"ipaddr"`
	Port              pgtype.Int4                   `json:"port"`
	Defaultip         pgtype.Text                   `json:"defaultip"`
	Sourceaddress     pgtype.Text                   `json:"sourceaddress"`
	Mask              pgtype.Text                   `json:"mask"`
	Regexten          pgtype.Text                   `json:"regexten"`
	Regseconds        pgtype.Int4                   `json:"regseconds"`
	Accountcode       pgtype.Text                   `json:"accountcode"`
	Mohinterpret      pgtype.Text                   `json:"mohinterpret"`
	Mohsuggest        pgtype.Text                   `json:"mohsuggest"`
	Inkeys            pgtype.Text                   `json:"inkeys"`
	Outkeys           pgtype.Text                   `json:"outkeys"`
	Language          pgtype.Text                   `json:"language"`
	Callerid          pgtype.Text                   `json:"callerid"`
	CidNumber         pgtype.Text                   `json:"cid_number"`
	Sendani           NullYesNoValues               `json:"sendani"`
	Fullname          pgtype.Text                   `json:"fullname"`
	Trunk             NullYesNoValues               `json:"trunk"`
	Auth              pgtype.Text                   `json:"auth"`
	Maxauthreq        pgtype.Int4                   `json:"maxauthreq"`
	Requirecalltoken  NullIaxRequirecalltokenValues `json:"requirecalltoken"`
	Encryption        NullIaxEncryptionValues       `json:"encryption"`
	Transfer          NullIaxTransferValues         `json:"transfer"`
	Jitterbuffer      NullYesNoValues               `json:"jitterbuffer"`
	Forcejitterbuffer NullYesNoValues               `json:"forcejitterbuffer"`
	Disallow          pgtype.Text                   `json:"disallow"`
	Allow             pgtype.Text                   `json:"allow"`
	Codecpriority     pgtype.Text                   `json:"codecpriority"`
	Qualify           pgtype.Text                   `json:"qualify"`
	Qualifysmoothing  NullYesNoValues               `json:"qualifysmoothing"`
	Qualifyfreqok     pgtype.Text                   `json:"qualifyfreqok"`
	Qualifyfreqnotok  pgtype.Text                   `json:"qualifyfreqnotok"`
	Timezone          pgtype.Text                   `json:"timezone"`
	Adsi              NullYesNoValues               `json:"adsi"`
	Amaflags          pgtype.Text                   `json:"amaflags"`
	Setvar            pgtype.Text                   `json:"setvar"`
}

type Meetme struct {
	Bookid            int32            `json:"bookid"`
	Confno            string           `json:"confno"`
	Starttime         pgtype.Timestamp `json:"starttime"`
	Endtime           pgtype.Timestamp `json:"endtime"`
	Pin               pgtype.Text      `json:"pin"`
	Adminpin          pgtype.Text      `json:"adminpin"`
	Opts              pgtype.Text      `json:"opts"`
	Adminopts         pgtype.Text      `json:"adminopts"`
	Recordingfilename pgtype.Text      `json:"recordingfilename"`
	Recordingformat   pgtype.Text      `json:"recordingformat"`
	Maxusers          pgtype.Int4      `json:"maxusers"`
	Members           int32            `json:"members"`
}

type Musiconhold struct {
	Name        string            `json:"name"`
	Mode        NullMohModeValues `json:"mode"`
	Directory   pgtype.Text       `json:"directory"`
	Application pgtype.Text       `json:"application"`
	Digit       pgtype.Text       `json:"digit"`
	Sort        pgtype.Text       `json:"sort"`
	Format      pgtype.Text       `json:"format"`
	Stamp       pgtype.Timestamp  `json:"stamp"`
	LoopLast    NullYesnoValues   `json:"loop_last"`
}

type MusiconholdEntry struct {
	Name     string `json:"name"`
	Position int32  `json:"position"`
	Entry    string `json:"entry"`
}

type PsAor struct {
	ID                  string            `json:"id"`
	Contact             pgtype.Text       `json:"contact"`
	DefaultExpiration   pgtype.Int4       `json:"default_expiration"`
	Mailboxes           pgtype.Text       `json:"mailboxes"`
	MaxContacts         pgtype.Int4       `json:"max_contacts"`
	MinimumExpiration   pgtype.Int4       `json:"minimum_expiration"`
	RemoveExisting      NullAstBoolValues `json:"remove_existing"`
	QualifyFrequency    pgtype.Int4       `json:"qualify_frequency"`
	AuthenticateQualify NullAstBoolValues `json:"authenticate_qualify"`
	MaximumExpiration   pgtype.Int4       `json:"maximum_expiration"`
	OutboundProxy       pgtype.Text       `json:"outbound_proxy"`
	SupportPath         NullAstBoolValues `json:"support_path"`
	QualifyTimeout      pgtype.Float8     `json:"qualify_timeout"`
	VoicemailExtension  pgtype.Text       `json:"voicemail_extension"`
	RemoveUnavailable   NullAstBoolValues `json:"remove_unavailable"`
}

type PsAsteriskPublication struct {
	ID                  string            `json:"id"`
	DevicestatePublish  pgtype.Text       `json:"devicestate_publish"`
	MailboxstatePublish pgtype.Text       `json:"mailboxstate_publish"`
	DeviceState         NullAstBoolValues `json:"device_state"`
	DeviceStateFilter   pgtype.Text       `json:"device_state_filter"`
	MailboxState        NullAstBoolValues `json:"mailbox_state"`
	MailboxStateFilter  pgtype.Text       `json:"mailbox_state_filter"`
}

type PsAuth struct {
	ID            string                    `json:"id"`
	AuthType      NullPjsipAuthTypeValuesV2 `json:"auth_type"`
	NonceLifetime pgtype.Int4               `json:"nonce_lifetime"`
	Md5Cred       pgtype.Text               `json:"md5_cred"`
	Password      pgtype.Text               `json:"password"`
	Realm         pgtype.Text               `json:"realm"`
	Username      pgtype.Text               `json:"username"`
	RefreshToken  pgtype.Text               `json:"refresh_token"`
	OauthClientid pgtype.Text               `json:"oauth_clientid"`
	OauthSecret   pgtype.Text               `json:"oauth_secret"`
}

type PsContact struct {
	ID                  string            `json:"id"`
	Uri                 pgtype.Text       `json:"uri"`
	ExpirationTime      pgtype.Int8       `json:"expiration_time"`
	QualifyFrequency    pgtype.Int4       `json:"qualify_frequency"`
	OutboundProxy       pgtype.Text       `json:"outbound_proxy"`
	Path                pgtype.Text       `json:"path"`
	UserAgent           pgtype.Text       `json:"user_agent"`
	QualifyTimeout      pgtype.Float8     `json:"qualify_timeout"`
	RegServer           pgtype.Text       `json:"reg_server"`
	AuthenticateQualify NullAstBoolValues `json:"authenticate_qualify"`
	ViaAddr             pgtype.Text       `json:"via_addr"`
	ViaPort             pgtype.Int4       `json:"via_port"`
	CallID              pgtype.Text       `json:"call_id"`
	Endpoint            pgtype.Text       `json:"endpoint"`
	PruneOnBoot         NullAstBoolValues `json:"prune_on_boot"`
}

type PsDomainAlias struct {
	ID     string      `json:"id"`
	Domain pgtype.Text `json:"domain"`
}

type PsEndpoint struct {
	ID                              string                                    `json:"id"`
	Transport                       pgtype.Text                               `json:"transport"`
	Aors                            pgtype.Text                               `json:"aors"`
	Auth                            pgtype.Text                               `json:"auth"`
	Context                         pgtype.Text                               `json:"context"`
	Disallow                        pgtype.Text                               `json:"disallow"`
	Allow                           pgtype.Text                               `json:"allow"`
	DirectMedia                     NullAstBoolValues                         `json:"direct_media"`
	ConnectedLineMethod             NullPjsipConnectedLineMethodValues        `json:"connected_line_method"`
	DirectMediaMethod               NullPjsipConnectedLineMethodValues        `json:"direct_media_method"`
	DirectMediaGlareMitigation      NullPjsipDirectMediaGlareMitigationValues `json:"direct_media_glare_mitigation"`
	DisableDirectMediaOnNat         NullAstBoolValues                         `json:"disable_direct_media_on_nat"`
	DtmfMode                        NullPjsipDtmfModeValuesV3                 `json:"dtmf_mode"`
	ExternalMediaAddress            pgtype.Text                               `json:"external_media_address"`
	ForceRport                      NullAstBoolValues                         `json:"force_rport"`
	IceSupport                      NullAstBoolValues                         `json:"ice_support"`
	IdentifyBy                      pgtype.Text                               `json:"identify_by"`
	Mailboxes                       pgtype.Text                               `json:"mailboxes"`
	MohSuggest                      pgtype.Text                               `json:"moh_suggest"`
	OutboundAuth                    pgtype.Text                               `json:"outbound_auth"`
	OutboundProxy                   pgtype.Text                               `json:"outbound_proxy"`
	RewriteContact                  NullAstBoolValues                         `json:"rewrite_contact"`
	RtpIpv6                         NullAstBoolValues                         `json:"rtp_ipv6"`
	RtpSymmetric                    NullAstBoolValues                         `json:"rtp_symmetric"`
	SendDiversion                   NullAstBoolValues                         `json:"send_diversion"`
	SendPai                         NullAstBoolValues                         `json:"send_pai"`
	SendRpid                        NullAstBoolValues                         `json:"send_rpid"`
	TimersMinSe                     pgtype.Int4                               `json:"timers_min_se"`
	Timers                          NullPjsipTimerValues                      `json:"timers"`
	TimersSessExpires               pgtype.Int4                               `json:"timers_sess_expires"`
	Callerid                        pgtype.Text                               `json:"callerid"`
	CalleridPrivacy                 NullPjsipCidPrivacyValues                 `json:"callerid_privacy"`
	CalleridTag                     pgtype.Text                               `json:"callerid_tag"`
	_100rel                         NullPjsip100relValuesV2                   `json:"100rel"`
	AggregateMwi                    NullAstBoolValues                         `json:"aggregate_mwi"`
	TrustIDInbound                  NullAstBoolValues                         `json:"trust_id_inbound"`
	TrustIDOutbound                 NullAstBoolValues                         `json:"trust_id_outbound"`
	UsePtime                        NullAstBoolValues                         `json:"use_ptime"`
	UseAvpf                         NullAstBoolValues                         `json:"use_avpf"`
	MediaEncryption                 NullPjsipMediaEncryptionValues            `json:"media_encryption"`
	InbandProgress                  NullAstBoolValues                         `json:"inband_progress"`
	CallGroup                       pgtype.Text                               `json:"call_group"`
	PickupGroup                     pgtype.Text                               `json:"pickup_group"`
	NamedCallGroup                  pgtype.Text                               `json:"named_call_group"`
	NamedPickupGroup                pgtype.Text                               `json:"named_pickup_group"`
	DeviceStateBusyAt               pgtype.Int4                               `json:"device_state_busy_at"`
	FaxDetect                       NullAstBoolValues                         `json:"fax_detect"`
	T38Udptl                        NullAstBoolValues                         `json:"t38_udptl"`
	T38UdptlEc                      NullPjsipT38udptlEcValues                 `json:"t38_udptl_ec"`
	T38UdptlMaxdatagram             pgtype.Int4                               `json:"t38_udptl_maxdatagram"`
	T38UdptlNat                     NullAstBoolValues                         `json:"t38_udptl_nat"`
	T38UdptlIpv6                    NullAstBoolValues                         `json:"t38_udptl_ipv6"`
	ToneZone                        pgtype.Text                               `json:"tone_zone"`
	Language                        pgtype.Text                               `json:"language"`
	OneTouchRecording               NullAstBoolValues                         `json:"one_touch_recording"`
	RecordOnFeature                 pgtype.Text                               `json:"record_on_feature"`
	RecordOffFeature                pgtype.Text                               `json:"record_off_feature"`
	RtpEngine                       pgtype.Text                               `json:"rtp_engine"`
	AllowTransfer                   NullAstBoolValues                         `json:"allow_transfer"`
	AllowSubscribe                  NullAstBoolValues                         `json:"allow_subscribe"`
	SdpOwner                        pgtype.Text                               `json:"sdp_owner"`
	SdpSession                      pgtype.Text                               `json:"sdp_session"`
	TosAudio                        pgtype.Text                               `json:"tos_audio"`
	TosVideo                        pgtype.Text                               `json:"tos_video"`
	SubMinExpiry                    pgtype.Int4                               `json:"sub_min_expiry"`
	FromDomain                      pgtype.Text                               `json:"from_domain"`
	FromUser                        pgtype.Text                               `json:"from_user"`
	MwiFromUser                     pgtype.Text                               `json:"mwi_from_user"`
	DtlsVerify                      pgtype.Text                               `json:"dtls_verify"`
	DtlsRekey                       pgtype.Text                               `json:"dtls_rekey"`
	DtlsCertFile                    pgtype.Text                               `json:"dtls_cert_file"`
	DtlsPrivateKey                  pgtype.Text                               `json:"dtls_private_key"`
	DtlsCipher                      pgtype.Text                               `json:"dtls_cipher"`
	DtlsCaFile                      pgtype.Text                               `json:"dtls_ca_file"`
	DtlsCaPath                      pgtype.Text                               `json:"dtls_ca_path"`
	DtlsSetup                       NullPjsipDtlsSetupValues                  `json:"dtls_setup"`
	SrtpTag32                       NullAstBoolValues                         `json:"srtp_tag_32"`
	MediaAddress                    pgtype.Text                               `json:"media_address"`
	RedirectMethod                  NullPjsipRedirectMethodValues             `json:"redirect_method"`
	SetVar                          pgtype.Text                               `json:"set_var"`
	CosAudio                        pgtype.Int4                               `json:"cos_audio"`
	CosVideo                        pgtype.Int4                               `json:"cos_video"`
	MessageContext                  pgtype.Text                               `json:"message_context"`
	ForceAvp                        NullAstBoolValues                         `json:"force_avp"`
	MediaUseReceivedTransport       NullAstBoolValues                         `json:"media_use_received_transport"`
	Accountcode                     pgtype.Text                               `json:"accountcode"`
	UserEqPhone                     NullAstBoolValues                         `json:"user_eq_phone"`
	MohPassthrough                  NullAstBoolValues                         `json:"moh_passthrough"`
	MediaEncryptionOptimistic       NullAstBoolValues                         `json:"media_encryption_optimistic"`
	RpidImmediate                   NullAstBoolValues                         `json:"rpid_immediate"`
	G726NonStandard                 NullAstBoolValues                         `json:"g726_non_standard"`
	RtpKeepalive                    pgtype.Int4                               `json:"rtp_keepalive"`
	RtpTimeout                      pgtype.Int4                               `json:"rtp_timeout"`
	RtpTimeoutHold                  pgtype.Int4                               `json:"rtp_timeout_hold"`
	BindRtpToMediaAddress           NullAstBoolValues                         `json:"bind_rtp_to_media_address"`
	VoicemailExtension              pgtype.Text                               `json:"voicemail_extension"`
	MwiSubscribeReplacesUnsolicited NullAstBoolValues                         `json:"mwi_subscribe_replaces_unsolicited"`
	Deny                            pgtype.Text                               `json:"deny"`
	Permit                          pgtype.Text                               `json:"permit"`
	Acl                             pgtype.Text                               `json:"acl"`
	ContactDeny                     pgtype.Text                               `json:"contact_deny"`
	ContactPermit                   pgtype.Text                               `json:"contact_permit"`
	ContactAcl                      pgtype.Text                               `json:"contact_acl"`
	SubscribeContext                pgtype.Text                               `json:"subscribe_context"`
	FaxDetectTimeout                pgtype.Int4                               `json:"fax_detect_timeout"`
	ContactUser                     pgtype.Text                               `json:"contact_user"`
	PreferredCodecOnly              NullAstBoolValues                         `json:"preferred_codec_only"`
	AsymmetricRtpCodec              NullAstBoolValues                         `json:"asymmetric_rtp_codec"`
	RtcpMux                         NullAstBoolValues                         `json:"rtcp_mux"`
	AllowOverlap                    NullAstBoolValues                         `json:"allow_overlap"`
	ReferBlindProgress              NullAstBoolValues                         `json:"refer_blind_progress"`
	NotifyEarlyInuseRinging         NullAstBoolValues                         `json:"notify_early_inuse_ringing"`
	MaxAudioStreams                 pgtype.Int4                               `json:"max_audio_streams"`
	MaxVideoStreams                 pgtype.Int4                               `json:"max_video_streams"`
	Webrtc                          NullAstBoolValues                         `json:"webrtc"`
	DtlsFingerprint                 NullShaHashValues                         `json:"dtls_fingerprint"`
	IncomingMwiMailbox              pgtype.Text                               `json:"incoming_mwi_mailbox"`
	Bundle                          NullAstBoolValues                         `json:"bundle"`
	DtlsAutoGenerateCert            NullAstBoolValues                         `json:"dtls_auto_generate_cert"`
	FollowEarlyMediaFork            NullAstBoolValues                         `json:"follow_early_media_fork"`
	AcceptMultipleSdpAnswers        NullAstBoolValues                         `json:"accept_multiple_sdp_answers"`
	SuppressQ850ReasonHeaders       NullAstBoolValues                         `json:"suppress_q850_reason_headers"`
	TrustConnectedLine              NullAstBoolValues                         `json:"trust_connected_line"`
	SendConnectedLine               NullAstBoolValues                         `json:"send_connected_line"`
	Ignore183WithoutSdp             NullAstBoolValues                         `json:"ignore_183_without_sdp"`
	CodecPrefsIncomingOffer         pgtype.Text                               `json:"codec_prefs_incoming_offer"`
	CodecPrefsOutgoingOffer         pgtype.Text                               `json:"codec_prefs_outgoing_offer"`
	CodecPrefsIncomingAnswer        pgtype.Text                               `json:"codec_prefs_incoming_answer"`
	CodecPrefsOutgoingAnswer        pgtype.Text                               `json:"codec_prefs_outgoing_answer"`
	StirShaken                      NullAstBoolValues                         `json:"stir_shaken"`
	SendHistoryInfo                 NullAstBoolValues                         `json:"send_history_info"`
	AllowUnauthenticatedOptions     NullAstBoolValues                         `json:"allow_unauthenticated_options"`
	T38BindUdptlToMediaAddress      NullAstBoolValues                         `json:"t38_bind_udptl_to_media_address"`
	GeolocIncomingCallProfile       pgtype.Text                               `json:"geoloc_incoming_call_profile"`
	GeolocOutgoingCallProfile       pgtype.Text                               `json:"geoloc_outgoing_call_profile"`
	IncomingCallOfferPref           NullPjsipIncomingCallOfferPrefValues      `json:"incoming_call_offer_pref"`
	OutgoingCallOfferPref           NullPjsipOutgoingCallOfferPrefValues      `json:"outgoing_call_offer_pref"`
	StirShakenProfile               pgtype.Text                               `json:"stir_shaken_profile"`
	SecurityNegotiation             NullSecurityNegotiationValues             `json:"security_negotiation"`
	SecurityMechanisms              pgtype.Text                               `json:"security_mechanisms"`
	SendAoc                         NullAstBoolValues                         `json:"send_aoc"`
	OverlapContext                  pgtype.Text                               `json:"overlap_context"`
}

type PsEndpointIDIp struct {
	ID              string            `json:"id"`
	Endpoint        pgtype.Text       `json:"endpoint"`
	Match           pgtype.Text       `json:"match"`
	SrvLookups      NullAstBoolValues `json:"srv_lookups"`
	MatchHeader     pgtype.Text       `json:"match_header"`
	MatchRequestUri pgtype.Text       `json:"match_request_uri"`
}

type PsGlobal struct {
	ID                                    string                                      `json:"id"`
	MaxForwards                           pgtype.Int4                                 `json:"max_forwards"`
	UserAgent                             pgtype.Text                                 `json:"user_agent"`
	DefaultOutboundEndpoint               pgtype.Text                                 `json:"default_outbound_endpoint"`
	Debug                                 pgtype.Text                                 `json:"debug"`
	EndpointIdentifierOrder               pgtype.Text                                 `json:"endpoint_identifier_order"`
	MaxInitialQualifyTime                 pgtype.Int4                                 `json:"max_initial_qualify_time"`
	DefaultFromUser                       pgtype.Text                                 `json:"default_from_user"`
	KeepAliveInterval                     pgtype.Int4                                 `json:"keep_alive_interval"`
	Regcontext                            pgtype.Text                                 `json:"regcontext"`
	ContactExpirationCheckInterval        pgtype.Int4                                 `json:"contact_expiration_check_interval"`
	DefaultVoicemailExtension             pgtype.Text                                 `json:"default_voicemail_extension"`
	DisableMultiDomain                    NullAstBoolValues                           `json:"disable_multi_domain"`
	UnidentifiedRequestCount              pgtype.Int4                                 `json:"unidentified_request_count"`
	UnidentifiedRequestPeriod             pgtype.Int4                                 `json:"unidentified_request_period"`
	UnidentifiedRequestPruneInterval      pgtype.Int4                                 `json:"unidentified_request_prune_interval"`
	DefaultRealm                          pgtype.Text                                 `json:"default_realm"`
	MwiTpsQueueHigh                       pgtype.Int4                                 `json:"mwi_tps_queue_high"`
	MwiTpsQueueLow                        pgtype.Int4                                 `json:"mwi_tps_queue_low"`
	MwiDisableInitialUnsolicited          NullAstBoolValues                           `json:"mwi_disable_initial_unsolicited"`
	IgnoreUriUserOptions                  NullAstBoolValues                           `json:"ignore_uri_user_options"`
	UseCalleridContact                    NullAstBoolValues                           `json:"use_callerid_contact"`
	SendContactStatusOnUpdateRegistration NullAstBoolValues                           `json:"send_contact_status_on_update_registration"`
	TaskprocessorOverloadTrigger          NullPjsipTaskprocessorOverloadTriggerValues `json:"taskprocessor_overload_trigger"`
	Norefersub                            NullAstBoolValues                           `json:"norefersub"`
	AllowSending180After183               NullAstBoolValues                           `json:"allow_sending_180_after_183"`
	AllCodecsOnEmptyReinvite              NullAstBoolValues                           `json:"all_codecs_on_empty_reinvite"`
}

type PsInboundPublication struct {
	ID                       string      `json:"id"`
	Endpoint                 pgtype.Text `json:"endpoint"`
	EventAsteriskDevicestate pgtype.Text `json:"event_asterisk-devicestate"`
	EventAsteriskMwi         pgtype.Text `json:"event_asterisk-mwi"`
}

type PsOutboundPublish struct {
	ID              string            `json:"id"`
	Expiration      pgtype.Int4       `json:"expiration"`
	OutboundAuth    pgtype.Text       `json:"outbound_auth"`
	OutboundProxy   pgtype.Text       `json:"outbound_proxy"`
	ServerUri       pgtype.Text       `json:"server_uri"`
	FromUri         pgtype.Text       `json:"from_uri"`
	ToUri           pgtype.Text       `json:"to_uri"`
	Event           pgtype.Text       `json:"event"`
	MaxAuthAttempts pgtype.Int4       `json:"max_auth_attempts"`
	Transport       pgtype.Text       `json:"transport"`
	MultiUser       NullAstBoolValues `json:"multi_user"`
	Body            pgtype.Text       `json:"@body"`
	Context         pgtype.Text       `json:"@context"`
	Exten           pgtype.Text       `json:"@exten"`
}

type PsRegistration struct {
	ID                     string                        `json:"id"`
	AuthRejectionPermanent NullAstBoolValues             `json:"auth_rejection_permanent"`
	ClientUri              pgtype.Text                   `json:"client_uri"`
	ContactUser            pgtype.Text                   `json:"contact_user"`
	Expiration             pgtype.Int4                   `json:"expiration"`
	MaxRetries             pgtype.Int4                   `json:"max_retries"`
	OutboundAuth           pgtype.Text                   `json:"outbound_auth"`
	OutboundProxy          pgtype.Text                   `json:"outbound_proxy"`
	RetryInterval          pgtype.Int4                   `json:"retry_interval"`
	ForbiddenRetryInterval pgtype.Int4                   `json:"forbidden_retry_interval"`
	ServerUri              pgtype.Text                   `json:"server_uri"`
	Transport              pgtype.Text                   `json:"transport"`
	SupportPath            NullAstBoolValues             `json:"support_path"`
	FatalRetryInterval     pgtype.Int4                   `json:"fatal_retry_interval"`
	Line                   NullAstBoolValues             `json:"line"`
	Endpoint               pgtype.Text                   `json:"endpoint"`
	SupportOutbound        NullAstBoolValues             `json:"support_outbound"`
	ContactHeaderParams    pgtype.Text                   `json:"contact_header_params"`
	MaxRandomInitialDelay  pgtype.Int4                   `json:"max_random_initial_delay"`
	SecurityNegotiation    NullSecurityNegotiationValues `json:"security_negotiation"`
	SecurityMechanisms     pgtype.Text                   `json:"security_mechanisms"`
	UserAgent              pgtype.Text                   `json:"user_agent"`
}

type PsResourceList struct {
	ID                        string            `json:"id"`
	ListItem                  pgtype.Text       `json:"list_item"`
	Event                     pgtype.Text       `json:"event"`
	FullState                 NullAstBoolValues `json:"full_state"`
	NotificationBatchInterval pgtype.Int4       `json:"notification_batch_interval"`
	ResourceDisplayName       NullAstBoolValues `json:"resource_display_name"`
}

type PsSubscriptionPersistence struct {
	ID           string            `json:"id"`
	Packet       pgtype.Text       `json:"packet"`
	SrcName      pgtype.Text       `json:"src_name"`
	SrcPort      pgtype.Int4       `json:"src_port"`
	TransportKey pgtype.Text       `json:"transport_key"`
	LocalName    pgtype.Text       `json:"local_name"`
	LocalPort    pgtype.Int4       `json:"local_port"`
	Cseq         pgtype.Int4       `json:"cseq"`
	Tag          pgtype.Text       `json:"tag"`
	Endpoint     pgtype.Text       `json:"endpoint"`
	Expires      pgtype.Int4       `json:"expires"`
	ContactUri   pgtype.Text       `json:"contact_uri"`
	PruneOnBoot  NullAstBoolValues `json:"prune_on_boot"`
}

type PsSystem struct {
	ID                       string            `json:"id"`
	TimerT1                  pgtype.Int4       `json:"timer_t1"`
	TimerB                   pgtype.Int4       `json:"timer_b"`
	CompactHeaders           NullAstBoolValues `json:"compact_headers"`
	ThreadpoolInitialSize    pgtype.Int4       `json:"threadpool_initial_size"`
	ThreadpoolAutoIncrement  pgtype.Int4       `json:"threadpool_auto_increment"`
	ThreadpoolIdleTimeout    pgtype.Int4       `json:"threadpool_idle_timeout"`
	ThreadpoolMaxSize        pgtype.Int4       `json:"threadpool_max_size"`
	DisableTcpSwitch         NullAstBoolValues `json:"disable_tcp_switch"`
	FollowEarlyMediaFork     NullAstBoolValues `json:"follow_early_media_fork"`
	AcceptMultipleSdpAnswers NullAstBoolValues `json:"accept_multiple_sdp_answers"`
	DisableRport             NullAstBoolValues `json:"disable_rport"`
}

type PsTransport struct {
	ID                       string                             `json:"id"`
	AsyncOperations          pgtype.Int4                        `json:"async_operations"`
	Bind                     pgtype.Text                        `json:"bind"`
	CaListFile               pgtype.Text                        `json:"ca_list_file"`
	CertFile                 pgtype.Text                        `json:"cert_file"`
	Cipher                   pgtype.Text                        `json:"cipher"`
	Domain                   pgtype.Text                        `json:"domain"`
	ExternalMediaAddress     pgtype.Text                        `json:"external_media_address"`
	ExternalSignalingAddress pgtype.Text                        `json:"external_signaling_address"`
	ExternalSignalingPort    pgtype.Int4                        `json:"external_signaling_port"`
	Method                   NullPjsipTransportMethodValuesV2   `json:"method"`
	LocalNet                 pgtype.Text                        `json:"local_net"`
	Password                 pgtype.Text                        `json:"password"`
	PrivKeyFile              pgtype.Text                        `json:"priv_key_file"`
	Protocol                 NullPjsipTransportProtocolValuesV2 `json:"protocol"`
	RequireClientCert        NullAstBoolValues                  `json:"require_client_cert"`
	VerifyClient             NullAstBoolValues                  `json:"verify_client"`
	VerifyServer             NullAstBoolValues                  `json:"verify_server"`
	Tos                      pgtype.Text                        `json:"tos"`
	Cos                      pgtype.Int4                        `json:"cos"`
	AllowReload              NullAstBoolValues                  `json:"allow_reload"`
	SymmetricTransport       NullAstBoolValues                  `json:"symmetric_transport"`
	AllowWildcardCerts       NullAstBoolValues                  `json:"allow_wildcard_certs"`
	TcpKeepaliveEnable       pgtype.Bool                        `json:"tcp_keepalive_enable"`
	TcpKeepaliveIdleTime     pgtype.Int4                        `json:"tcp_keepalive_idle_time"`
	TcpKeepaliveIntervalTime pgtype.Int4                        `json:"tcp_keepalive_interval_time"`
	TcpKeepaliveProbeCount   pgtype.Int4                        `json:"tcp_keepalive_probe_count"`
}

type Queue struct {
	Name                      string                   `json:"name"`
	Musiconhold               pgtype.Text              `json:"musiconhold"`
	Announce                  pgtype.Text              `json:"announce"`
	Context                   pgtype.Text              `json:"context"`
	Timeout                   pgtype.Int4              `json:"timeout"`
	Ringinuse                 NullYesnoValues          `json:"ringinuse"`
	Setinterfacevar           NullYesnoValues          `json:"setinterfacevar"`
	Setqueuevar               NullYesnoValues          `json:"setqueuevar"`
	Setqueueentryvar          NullYesnoValues          `json:"setqueueentryvar"`
	MonitorFormat             pgtype.Text              `json:"monitor_format"`
	Membermacro               pgtype.Text              `json:"membermacro"`
	Membergosub               pgtype.Text              `json:"membergosub"`
	QueueYouarenext           pgtype.Text              `json:"queue_youarenext"`
	QueueThereare             pgtype.Text              `json:"queue_thereare"`
	QueueCallswaiting         pgtype.Text              `json:"queue_callswaiting"`
	QueueQuantity1            pgtype.Text              `json:"queue_quantity1"`
	QueueQuantity2            pgtype.Text              `json:"queue_quantity2"`
	QueueHoldtime             pgtype.Text              `json:"queue_holdtime"`
	QueueMinutes              pgtype.Text              `json:"queue_minutes"`
	QueueMinute               pgtype.Text              `json:"queue_minute"`
	QueueSeconds              pgtype.Text              `json:"queue_seconds"`
	QueueThankyou             pgtype.Text              `json:"queue_thankyou"`
	QueueCallerannounce       pgtype.Text              `json:"queue_callerannounce"`
	QueueReporthold           pgtype.Text              `json:"queue_reporthold"`
	AnnounceFrequency         pgtype.Int4              `json:"announce_frequency"`
	AnnounceToFirstUser       NullYesnoValues          `json:"announce_to_first_user"`
	MinAnnounceFrequency      pgtype.Int4              `json:"min_announce_frequency"`
	AnnounceRoundSeconds      pgtype.Int4              `json:"announce_round_seconds"`
	AnnounceHoldtime          pgtype.Text              `json:"announce_holdtime"`
	AnnouncePosition          pgtype.Text              `json:"announce_position"`
	AnnouncePositionLimit     pgtype.Int4              `json:"announce_position_limit"`
	PeriodicAnnounce          pgtype.Text              `json:"periodic_announce"`
	PeriodicAnnounceFrequency pgtype.Int4              `json:"periodic_announce_frequency"`
	RelativePeriodicAnnounce  NullYesnoValues          `json:"relative_periodic_announce"`
	RandomPeriodicAnnounce    NullYesnoValues          `json:"random_periodic_announce"`
	Retry                     pgtype.Int4              `json:"retry"`
	Wrapuptime                pgtype.Int4              `json:"wrapuptime"`
	Penaltymemberslimit       pgtype.Int4              `json:"penaltymemberslimit"`
	Autofill                  NullYesnoValues          `json:"autofill"`
	MonitorType               pgtype.Text              `json:"monitor_type"`
	Autopause                 NullQueueAutopauseValues `json:"autopause"`
	Autopausedelay            pgtype.Int4              `json:"autopausedelay"`
	Autopausebusy             NullYesnoValues          `json:"autopausebusy"`
	Autopauseunavail          NullYesnoValues          `json:"autopauseunavail"`
	Maxlen                    pgtype.Int4              `json:"maxlen"`
	Servicelevel              pgtype.Int4              `json:"servicelevel"`
	Strategy                  NullQueueStrategyValues  `json:"strategy"`
	Joinempty                 pgtype.Text              `json:"joinempty"`
	Leavewhenempty            pgtype.Text              `json:"leavewhenempty"`
	Reportholdtime            NullYesnoValues          `json:"reportholdtime"`
	Memberdelay               pgtype.Int4              `json:"memberdelay"`
	Weight                    pgtype.Int4              `json:"weight"`
	Timeoutrestart            NullYesnoValues          `json:"timeoutrestart"`
	Defaultrule               pgtype.Text              `json:"defaultrule"`
	Timeoutpriority           pgtype.Text              `json:"timeoutpriority"`
}

type QueueMember struct {
	QueueName      string            `json:"queue_name"`
	Interface      string            `json:"interface"`
	Membername     pgtype.Text       `json:"membername"`
	StateInterface pgtype.Text       `json:"state_interface"`
	Penalty        pgtype.Int4       `json:"penalty"`
	Paused         pgtype.Int4       `json:"paused"`
	Uniqueid       int32             `json:"uniqueid"`
	Wrapuptime     pgtype.Int4       `json:"wrapuptime"`
	Ringinuse      NullAstBoolValues `json:"ringinuse"`
	ReasonPaused   pgtype.Text       `json:"reason_paused"`
}

type QueueRule struct {
	RuleName   string `json:"rule_name"`
	Time       string `json:"time"`
	MinPenalty string `json:"min_penalty"`
	MaxPenalty string `json:"max_penalty"`
}

type Sippeer struct {
	ID                int32                         `json:"id"`
	Name              string                        `json:"name"`
	Ipaddr            pgtype.Text                   `json:"ipaddr"`
	Port              pgtype.Int4                   `json:"port"`
	Regseconds        pgtype.Int4                   `json:"regseconds"`
	Defaultuser       pgtype.Text                   `json:"defaultuser"`
	Fullcontact       pgtype.Text                   `json:"fullcontact"`
	Regserver         pgtype.Text                   `json:"regserver"`
	Useragent         pgtype.Text                   `json:"useragent"`
	Lastms            pgtype.Int4                   `json:"lastms"`
	Host              pgtype.Text                   `json:"host"`
	Type              NullTypeValues                `json:"type"`
	Context           pgtype.Text                   `json:"context"`
	Permit            pgtype.Text                   `json:"permit"`
	Deny              pgtype.Text                   `json:"deny"`
	Secret            pgtype.Text                   `json:"secret"`
	Md5secret         pgtype.Text                   `json:"md5secret"`
	Remotesecret      pgtype.Text                   `json:"remotesecret"`
	Transport         NullSipTransportValues        `json:"transport"`
	Dtmfmode          NullSipDtmfmodeValues         `json:"dtmfmode"`
	Directmedia       NullSipDirectmediaValuesV2    `json:"directmedia"`
	Nat               pgtype.Text                   `json:"nat"`
	Callgroup         pgtype.Text                   `json:"callgroup"`
	Pickupgroup       pgtype.Text                   `json:"pickupgroup"`
	Language          pgtype.Text                   `json:"language"`
	Disallow          pgtype.Text                   `json:"disallow"`
	Allow             pgtype.Text                   `json:"allow"`
	Insecure          pgtype.Text                   `json:"insecure"`
	Trustrpid         NullYesNoValues               `json:"trustrpid"`
	Progressinband    NullSipProgressinbandValues   `json:"progressinband"`
	Promiscredir      NullYesNoValues               `json:"promiscredir"`
	Useclientcode     NullYesNoValues               `json:"useclientcode"`
	Accountcode       pgtype.Text                   `json:"accountcode"`
	Setvar            pgtype.Text                   `json:"setvar"`
	Callerid          pgtype.Text                   `json:"callerid"`
	Amaflags          pgtype.Text                   `json:"amaflags"`
	Callcounter       NullYesNoValues               `json:"callcounter"`
	Busylevel         pgtype.Int4                   `json:"busylevel"`
	Allowoverlap      NullYesNoValues               `json:"allowoverlap"`
	Allowsubscribe    NullYesNoValues               `json:"allowsubscribe"`
	Videosupport      NullYesNoValues               `json:"videosupport"`
	Maxcallbitrate    pgtype.Int4                   `json:"maxcallbitrate"`
	Rfc2833compensate NullYesNoValues               `json:"rfc2833compensate"`
	Mailbox           pgtype.Text                   `json:"mailbox"`
	SessionTimers     NullSipSessionTimersValues    `json:"session-timers"`
	SessionExpires    pgtype.Int4                   `json:"session-expires"`
	SessionMinse      pgtype.Int4                   `json:"session-minse"`
	SessionRefresher  NullSipSessionRefresherValues `json:"session-refresher"`
	T38ptUsertpsource pgtype.Text                   `json:"t38pt_usertpsource"`
	Regexten          pgtype.Text                   `json:"regexten"`
	Fromdomain        pgtype.Text                   `json:"fromdomain"`
	Fromuser          pgtype.Text                   `json:"fromuser"`
	Qualify           pgtype.Text                   `json:"qualify"`
	Defaultip         pgtype.Text                   `json:"defaultip"`
	Rtptimeout        pgtype.Int4                   `json:"rtptimeout"`
	Rtpholdtimeout    pgtype.Int4                   `json:"rtpholdtimeout"`
	Sendrpid          NullYesNoValues               `json:"sendrpid"`
	Outboundproxy     pgtype.Text                   `json:"outboundproxy"`
	Callbackextension pgtype.Text                   `json:"callbackextension"`
	Timert1           pgtype.Int4                   `json:"timert1"`
	Timerb            pgtype.Int4                   `json:"timerb"`
	Qualifyfreq       pgtype.Int4                   `json:"qualifyfreq"`
	Constantssrc      NullYesNoValues               `json:"constantssrc"`
	Contactpermit     pgtype.Text                   `json:"contactpermit"`
	Contactdeny       pgtype.Text                   `json:"contactdeny"`
	Usereqphone       NullYesNoValues               `json:"usereqphone"`
	Textsupport       NullYesNoValues               `json:"textsupport"`
	Faxdetect         NullYesNoValues               `json:"faxdetect"`
	Buggymwi          NullYesNoValues               `json:"buggymwi"`
	Auth              pgtype.Text                   `json:"auth"`
	Fullname          pgtype.Text                   `json:"fullname"`
	Trunkname         pgtype.Text                   `json:"trunkname"`
	CidNumber         pgtype.Text                   `json:"cid_number"`
	Callingpres       NullSipCallingpresValues      `json:"callingpres"`
	Mohinterpret      pgtype.Text                   `json:"mohinterpret"`
	Mohsuggest        pgtype.Text                   `json:"mohsuggest"`
	Parkinglot        pgtype.Text                   `json:"parkinglot"`
	Hasvoicemail      NullYesNoValues               `json:"hasvoicemail"`
	Subscribemwi      NullYesNoValues               `json:"subscribemwi"`
	Vmexten           pgtype.Text                   `json:"vmexten"`
	Autoframing       NullYesNoValues               `json:"autoframing"`
	Rtpkeepalive      pgtype.Int4                   `json:"rtpkeepalive"`
	CallLimit         pgtype.Int4                   `json:"call-limit"`
	G726nonstandard   NullYesNoValues               `json:"g726nonstandard"`
	Ignoresdpversion  NullYesNoValues               `json:"ignoresdpversion"`
	Allowtransfer     NullYesNoValues               `json:"allowtransfer"`
	Dynamic           NullYesNoValues               `json:"dynamic"`
	Path              pgtype.Text                   `json:"path"`
	Supportpath       NullYesNoValues               `json:"supportpath"`
}

type StirTn struct {
	ID             string            `json:"id"`
	PrivateKeyFile pgtype.Text       `json:"private_key_file"`
	PublicCertUrl  pgtype.Text       `json:"public_cert_url"`
	AttestLevel    pgtype.Text       `json:"attest_level"`
	SendMky        NullAstBoolValues `json:"send_mky"`
}

type Voicemail struct {
	Uniqueid        int32            `json:"uniqueid"`
	Context         string           `json:"context"`
	Mailbox         string           `json:"mailbox"`
	Password        string           `json:"password"`
	Fullname        pgtype.Text      `json:"fullname"`
	Alias           pgtype.Text      `json:"alias"`
	Email           pgtype.Text      `json:"email"`
	Pager           pgtype.Text      `json:"pager"`
	Attach          NullYesNoValues  `json:"attach"`
	Attachfmt       pgtype.Text      `json:"attachfmt"`
	Serveremail     pgtype.Text      `json:"serveremail"`
	Language        pgtype.Text      `json:"language"`
	Tz              pgtype.Text      `json:"tz"`
	Deletevoicemail NullYesNoValues  `json:"deletevoicemail"`
	Saycid          NullYesNoValues  `json:"saycid"`
	Sendvoicemail   NullYesNoValues  `json:"sendvoicemail"`
	Review          NullYesNoValues  `json:"review"`
	Tempgreetwarn   NullYesNoValues  `json:"tempgreetwarn"`
	Operator        NullYesNoValues  `json:"operator"`
	Envelope        NullYesNoValues  `json:"envelope"`
	Sayduration     pgtype.Int4      `json:"sayduration"`
	Forcename       NullYesNoValues  `json:"forcename"`
	Forcegreetings  NullYesNoValues  `json:"forcegreetings"`
	Callback        pgtype.Text      `json:"callback"`
	Dialout         pgtype.Text      `json:"dialout"`
	Exitcontext     pgtype.Text      `json:"exitcontext"`
	Maxmsg          pgtype.Int4      `json:"maxmsg"`
	Volgain         pgtype.Numeric   `json:"volgain"`
	Imapuser        pgtype.Text      `json:"imapuser"`
	Imappassword    pgtype.Text      `json:"imappassword"`
	Imapserver      pgtype.Text      `json:"imapserver"`
	Imapport        pgtype.Text      `json:"imapport"`
	Imapflags       pgtype.Text      `json:"imapflags"`
	Stamp           pgtype.Timestamp `json:"stamp"`
}
