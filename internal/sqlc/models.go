// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AstBoolValues string

const (
	AstBoolValues0     AstBoolValues = "0"
	AstBoolValues1     AstBoolValues = "1"
	AstBoolValuesOff   AstBoolValues = "off"
	AstBoolValuesOn    AstBoolValues = "on"
	AstBoolValuesFalse AstBoolValues = "false"
	AstBoolValuesTrue  AstBoolValues = "true"
	AstBoolValuesNo    AstBoolValues = "no"
	AstBoolValuesYes   AstBoolValues = "yes"
)

func (e *AstBoolValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AstBoolValues(s)
	case string:
		*e = AstBoolValues(s)
	default:
		return fmt.Errorf("unsupported scan type for AstBoolValues: %T", src)
	}
	return nil
}

type NullAstBoolValues struct {
	AstBoolValues AstBoolValues
	Valid         bool // Valid is true if AstBoolValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAstBoolValues) Scan(value interface{}) error {
	if value == nil {
		ns.AstBoolValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AstBoolValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAstBoolValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AstBoolValues), nil
}

type IaxEncryptionValues string

const (
	IaxEncryptionValuesYes    IaxEncryptionValues = "yes"
	IaxEncryptionValuesNo     IaxEncryptionValues = "no"
	IaxEncryptionValuesAes128 IaxEncryptionValues = "aes128"
)

func (e *IaxEncryptionValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IaxEncryptionValues(s)
	case string:
		*e = IaxEncryptionValues(s)
	default:
		return fmt.Errorf("unsupported scan type for IaxEncryptionValues: %T", src)
	}
	return nil
}

type NullIaxEncryptionValues struct {
	IaxEncryptionValues IaxEncryptionValues
	Valid               bool // Valid is true if IaxEncryptionValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIaxEncryptionValues) Scan(value interface{}) error {
	if value == nil {
		ns.IaxEncryptionValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IaxEncryptionValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIaxEncryptionValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IaxEncryptionValues), nil
}

type IaxRequirecalltokenValues string

const (
	IaxRequirecalltokenValuesYes  IaxRequirecalltokenValues = "yes"
	IaxRequirecalltokenValuesNo   IaxRequirecalltokenValues = "no"
	IaxRequirecalltokenValuesAuto IaxRequirecalltokenValues = "auto"
)

func (e *IaxRequirecalltokenValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IaxRequirecalltokenValues(s)
	case string:
		*e = IaxRequirecalltokenValues(s)
	default:
		return fmt.Errorf("unsupported scan type for IaxRequirecalltokenValues: %T", src)
	}
	return nil
}

type NullIaxRequirecalltokenValues struct {
	IaxRequirecalltokenValues IaxRequirecalltokenValues
	Valid                     bool // Valid is true if IaxRequirecalltokenValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIaxRequirecalltokenValues) Scan(value interface{}) error {
	if value == nil {
		ns.IaxRequirecalltokenValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IaxRequirecalltokenValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIaxRequirecalltokenValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IaxRequirecalltokenValues), nil
}

type IaxTransferValues string

const (
	IaxTransferValuesYes       IaxTransferValues = "yes"
	IaxTransferValuesNo        IaxTransferValues = "no"
	IaxTransferValuesMediaonly IaxTransferValues = "mediaonly"
)

func (e *IaxTransferValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IaxTransferValues(s)
	case string:
		*e = IaxTransferValues(s)
	default:
		return fmt.Errorf("unsupported scan type for IaxTransferValues: %T", src)
	}
	return nil
}

type NullIaxTransferValues struct {
	IaxTransferValues IaxTransferValues
	Valid             bool // Valid is true if IaxTransferValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIaxTransferValues) Scan(value interface{}) error {
	if value == nil {
		ns.IaxTransferValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IaxTransferValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIaxTransferValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IaxTransferValues), nil
}

type MohModeValues string

const (
	MohModeValuesCustom     MohModeValues = "custom"
	MohModeValuesFiles      MohModeValues = "files"
	MohModeValuesMp3nb      MohModeValues = "mp3nb"
	MohModeValuesQuietmp3nb MohModeValues = "quietmp3nb"
	MohModeValuesQuietmp3   MohModeValues = "quietmp3"
	MohModeValuesPlaylist   MohModeValues = "playlist"
)

func (e *MohModeValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MohModeValues(s)
	case string:
		*e = MohModeValues(s)
	default:
		return fmt.Errorf("unsupported scan type for MohModeValues: %T", src)
	}
	return nil
}

type NullMohModeValues struct {
	MohModeValues MohModeValues
	Valid         bool // Valid is true if MohModeValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMohModeValues) Scan(value interface{}) error {
	if value == nil {
		ns.MohModeValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MohModeValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMohModeValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MohModeValues), nil
}

type Pjsip100relValuesV2 string

const (
	Pjsip100relValuesV2No            Pjsip100relValuesV2 = "no"
	Pjsip100relValuesV2Required      Pjsip100relValuesV2 = "required"
	Pjsip100relValuesV2PeerSupported Pjsip100relValuesV2 = "peer_supported"
	Pjsip100relValuesV2Yes           Pjsip100relValuesV2 = "yes"
)

func (e *Pjsip100relValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Pjsip100relValuesV2(s)
	case string:
		*e = Pjsip100relValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for Pjsip100relValuesV2: %T", src)
	}
	return nil
}

type NullPjsip100relValuesV2 struct {
	Pjsip100relValuesV2 Pjsip100relValuesV2
	Valid               bool // Valid is true if Pjsip100relValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsip100relValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.Pjsip100relValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Pjsip100relValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsip100relValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Pjsip100relValuesV2), nil
}

type PjsipAuthTypeValuesV2 string

const (
	PjsipAuthTypeValuesV2Md5         PjsipAuthTypeValuesV2 = "md5"
	PjsipAuthTypeValuesV2Userpass    PjsipAuthTypeValuesV2 = "userpass"
	PjsipAuthTypeValuesV2GoogleOauth PjsipAuthTypeValuesV2 = "google_oauth"
)

func (e *PjsipAuthTypeValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipAuthTypeValuesV2(s)
	case string:
		*e = PjsipAuthTypeValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipAuthTypeValuesV2: %T", src)
	}
	return nil
}

type NullPjsipAuthTypeValuesV2 struct {
	PjsipAuthTypeValuesV2 PjsipAuthTypeValuesV2
	Valid                 bool // Valid is true if PjsipAuthTypeValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipAuthTypeValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipAuthTypeValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipAuthTypeValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipAuthTypeValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipAuthTypeValuesV2), nil
}

type PjsipCidPrivacyValues string

const (
	PjsipCidPrivacyValuesAllowedNotScreened    PjsipCidPrivacyValues = "allowed_not_screened"
	PjsipCidPrivacyValuesAllowedPassedScreened PjsipCidPrivacyValues = "allowed_passed_screened"
	PjsipCidPrivacyValuesAllowedFailedScreened PjsipCidPrivacyValues = "allowed_failed_screened"
	PjsipCidPrivacyValuesAllowed               PjsipCidPrivacyValues = "allowed"
	PjsipCidPrivacyValuesProhibNotScreened     PjsipCidPrivacyValues = "prohib_not_screened"
	PjsipCidPrivacyValuesProhibPassedScreened  PjsipCidPrivacyValues = "prohib_passed_screened"
	PjsipCidPrivacyValuesProhibFailedScreened  PjsipCidPrivacyValues = "prohib_failed_screened"
	PjsipCidPrivacyValuesProhib                PjsipCidPrivacyValues = "prohib"
	PjsipCidPrivacyValuesUnavailable           PjsipCidPrivacyValues = "unavailable"
)

func (e *PjsipCidPrivacyValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipCidPrivacyValues(s)
	case string:
		*e = PjsipCidPrivacyValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipCidPrivacyValues: %T", src)
	}
	return nil
}

type NullPjsipCidPrivacyValues struct {
	PjsipCidPrivacyValues PjsipCidPrivacyValues
	Valid                 bool // Valid is true if PjsipCidPrivacyValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipCidPrivacyValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipCidPrivacyValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipCidPrivacyValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipCidPrivacyValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipCidPrivacyValues), nil
}

type PjsipConnectedLineMethodValues string

const (
	PjsipConnectedLineMethodValuesInvite   PjsipConnectedLineMethodValues = "invite"
	PjsipConnectedLineMethodValuesReinvite PjsipConnectedLineMethodValues = "reinvite"
	PjsipConnectedLineMethodValuesUpdate   PjsipConnectedLineMethodValues = "update"
)

func (e *PjsipConnectedLineMethodValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipConnectedLineMethodValues(s)
	case string:
		*e = PjsipConnectedLineMethodValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipConnectedLineMethodValues: %T", src)
	}
	return nil
}

type NullPjsipConnectedLineMethodValues struct {
	PjsipConnectedLineMethodValues PjsipConnectedLineMethodValues
	Valid                          bool // Valid is true if PjsipConnectedLineMethodValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipConnectedLineMethodValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipConnectedLineMethodValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipConnectedLineMethodValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipConnectedLineMethodValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipConnectedLineMethodValues), nil
}

type PjsipDirectMediaGlareMitigationValues string

const (
	PjsipDirectMediaGlareMitigationValuesNone     PjsipDirectMediaGlareMitigationValues = "none"
	PjsipDirectMediaGlareMitigationValuesOutgoing PjsipDirectMediaGlareMitigationValues = "outgoing"
	PjsipDirectMediaGlareMitigationValuesIncoming PjsipDirectMediaGlareMitigationValues = "incoming"
)

func (e *PjsipDirectMediaGlareMitigationValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipDirectMediaGlareMitigationValues(s)
	case string:
		*e = PjsipDirectMediaGlareMitigationValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipDirectMediaGlareMitigationValues: %T", src)
	}
	return nil
}

type NullPjsipDirectMediaGlareMitigationValues struct {
	PjsipDirectMediaGlareMitigationValues PjsipDirectMediaGlareMitigationValues
	Valid                                 bool // Valid is true if PjsipDirectMediaGlareMitigationValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipDirectMediaGlareMitigationValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipDirectMediaGlareMitigationValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipDirectMediaGlareMitigationValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipDirectMediaGlareMitigationValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipDirectMediaGlareMitigationValues), nil
}

type PjsipDtlsSetupValues string

const (
	PjsipDtlsSetupValuesActive  PjsipDtlsSetupValues = "active"
	PjsipDtlsSetupValuesPassive PjsipDtlsSetupValues = "passive"
	PjsipDtlsSetupValuesActpass PjsipDtlsSetupValues = "actpass"
)

func (e *PjsipDtlsSetupValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipDtlsSetupValues(s)
	case string:
		*e = PjsipDtlsSetupValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipDtlsSetupValues: %T", src)
	}
	return nil
}

type NullPjsipDtlsSetupValues struct {
	PjsipDtlsSetupValues PjsipDtlsSetupValues
	Valid                bool // Valid is true if PjsipDtlsSetupValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipDtlsSetupValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipDtlsSetupValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipDtlsSetupValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipDtlsSetupValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipDtlsSetupValues), nil
}

type PjsipDtmfModeValuesV3 string

const (
	PjsipDtmfModeValuesV3Rfc4733  PjsipDtmfModeValuesV3 = "rfc4733"
	PjsipDtmfModeValuesV3Inband   PjsipDtmfModeValuesV3 = "inband"
	PjsipDtmfModeValuesV3Info     PjsipDtmfModeValuesV3 = "info"
	PjsipDtmfModeValuesV3Auto     PjsipDtmfModeValuesV3 = "auto"
	PjsipDtmfModeValuesV3AutoInfo PjsipDtmfModeValuesV3 = "auto_info"
)

func (e *PjsipDtmfModeValuesV3) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipDtmfModeValuesV3(s)
	case string:
		*e = PjsipDtmfModeValuesV3(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipDtmfModeValuesV3: %T", src)
	}
	return nil
}

type NullPjsipDtmfModeValuesV3 struct {
	PjsipDtmfModeValuesV3 PjsipDtmfModeValuesV3
	Valid                 bool // Valid is true if PjsipDtmfModeValuesV3 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipDtmfModeValuesV3) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipDtmfModeValuesV3, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipDtmfModeValuesV3.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipDtmfModeValuesV3) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipDtmfModeValuesV3), nil
}

type PjsipIncomingCallOfferPrefValues string

const (
	PjsipIncomingCallOfferPrefValuesLocal       PjsipIncomingCallOfferPrefValues = "local"
	PjsipIncomingCallOfferPrefValuesLocalFirst  PjsipIncomingCallOfferPrefValues = "local_first"
	PjsipIncomingCallOfferPrefValuesRemote      PjsipIncomingCallOfferPrefValues = "remote"
	PjsipIncomingCallOfferPrefValuesRemoteFirst PjsipIncomingCallOfferPrefValues = "remote_first"
)

func (e *PjsipIncomingCallOfferPrefValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipIncomingCallOfferPrefValues(s)
	case string:
		*e = PjsipIncomingCallOfferPrefValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipIncomingCallOfferPrefValues: %T", src)
	}
	return nil
}

type NullPjsipIncomingCallOfferPrefValues struct {
	PjsipIncomingCallOfferPrefValues PjsipIncomingCallOfferPrefValues
	Valid                            bool // Valid is true if PjsipIncomingCallOfferPrefValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipIncomingCallOfferPrefValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipIncomingCallOfferPrefValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipIncomingCallOfferPrefValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipIncomingCallOfferPrefValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipIncomingCallOfferPrefValues), nil
}

type PjsipMediaEncryptionValues string

const (
	PjsipMediaEncryptionValuesNo   PjsipMediaEncryptionValues = "no"
	PjsipMediaEncryptionValuesSdes PjsipMediaEncryptionValues = "sdes"
	PjsipMediaEncryptionValuesDtls PjsipMediaEncryptionValues = "dtls"
)

func (e *PjsipMediaEncryptionValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipMediaEncryptionValues(s)
	case string:
		*e = PjsipMediaEncryptionValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipMediaEncryptionValues: %T", src)
	}
	return nil
}

type NullPjsipMediaEncryptionValues struct {
	PjsipMediaEncryptionValues PjsipMediaEncryptionValues
	Valid                      bool // Valid is true if PjsipMediaEncryptionValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipMediaEncryptionValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipMediaEncryptionValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipMediaEncryptionValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipMediaEncryptionValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipMediaEncryptionValues), nil
}

type PjsipOutgoingCallOfferPrefValues string

const (
	PjsipOutgoingCallOfferPrefValuesLocal       PjsipOutgoingCallOfferPrefValues = "local"
	PjsipOutgoingCallOfferPrefValuesLocalMerge  PjsipOutgoingCallOfferPrefValues = "local_merge"
	PjsipOutgoingCallOfferPrefValuesLocalFirst  PjsipOutgoingCallOfferPrefValues = "local_first"
	PjsipOutgoingCallOfferPrefValuesRemote      PjsipOutgoingCallOfferPrefValues = "remote"
	PjsipOutgoingCallOfferPrefValuesRemoteMerge PjsipOutgoingCallOfferPrefValues = "remote_merge"
	PjsipOutgoingCallOfferPrefValuesRemoteFirst PjsipOutgoingCallOfferPrefValues = "remote_first"
)

func (e *PjsipOutgoingCallOfferPrefValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipOutgoingCallOfferPrefValues(s)
	case string:
		*e = PjsipOutgoingCallOfferPrefValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipOutgoingCallOfferPrefValues: %T", src)
	}
	return nil
}

type NullPjsipOutgoingCallOfferPrefValues struct {
	PjsipOutgoingCallOfferPrefValues PjsipOutgoingCallOfferPrefValues
	Valid                            bool // Valid is true if PjsipOutgoingCallOfferPrefValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipOutgoingCallOfferPrefValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipOutgoingCallOfferPrefValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipOutgoingCallOfferPrefValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipOutgoingCallOfferPrefValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipOutgoingCallOfferPrefValues), nil
}

type PjsipRedirectMethodValues string

const (
	PjsipRedirectMethodValuesUser     PjsipRedirectMethodValues = "user"
	PjsipRedirectMethodValuesUriCore  PjsipRedirectMethodValues = "uri_core"
	PjsipRedirectMethodValuesUriPjsip PjsipRedirectMethodValues = "uri_pjsip"
)

func (e *PjsipRedirectMethodValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipRedirectMethodValues(s)
	case string:
		*e = PjsipRedirectMethodValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipRedirectMethodValues: %T", src)
	}
	return nil
}

type NullPjsipRedirectMethodValues struct {
	PjsipRedirectMethodValues PjsipRedirectMethodValues
	Valid                     bool // Valid is true if PjsipRedirectMethodValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipRedirectMethodValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipRedirectMethodValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipRedirectMethodValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipRedirectMethodValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipRedirectMethodValues), nil
}

type PjsipT38udptlEcValues string

const (
	PjsipT38udptlEcValuesNone       PjsipT38udptlEcValues = "none"
	PjsipT38udptlEcValuesFec        PjsipT38udptlEcValues = "fec"
	PjsipT38udptlEcValuesRedundancy PjsipT38udptlEcValues = "redundancy"
)

func (e *PjsipT38udptlEcValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipT38udptlEcValues(s)
	case string:
		*e = PjsipT38udptlEcValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipT38udptlEcValues: %T", src)
	}
	return nil
}

type NullPjsipT38udptlEcValues struct {
	PjsipT38udptlEcValues PjsipT38udptlEcValues
	Valid                 bool // Valid is true if PjsipT38udptlEcValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipT38udptlEcValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipT38udptlEcValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipT38udptlEcValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipT38udptlEcValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipT38udptlEcValues), nil
}

type PjsipTaskprocessorOverloadTriggerValues string

const (
	PjsipTaskprocessorOverloadTriggerValuesNone      PjsipTaskprocessorOverloadTriggerValues = "none"
	PjsipTaskprocessorOverloadTriggerValuesGlobal    PjsipTaskprocessorOverloadTriggerValues = "global"
	PjsipTaskprocessorOverloadTriggerValuesPjsipOnly PjsipTaskprocessorOverloadTriggerValues = "pjsip_only"
)

func (e *PjsipTaskprocessorOverloadTriggerValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTaskprocessorOverloadTriggerValues(s)
	case string:
		*e = PjsipTaskprocessorOverloadTriggerValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTaskprocessorOverloadTriggerValues: %T", src)
	}
	return nil
}

type NullPjsipTaskprocessorOverloadTriggerValues struct {
	PjsipTaskprocessorOverloadTriggerValues PjsipTaskprocessorOverloadTriggerValues
	Valid                                   bool // Valid is true if PjsipTaskprocessorOverloadTriggerValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTaskprocessorOverloadTriggerValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTaskprocessorOverloadTriggerValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTaskprocessorOverloadTriggerValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTaskprocessorOverloadTriggerValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTaskprocessorOverloadTriggerValues), nil
}

type PjsipTimerValues string

const (
	PjsipTimerValuesForced   PjsipTimerValues = "forced"
	PjsipTimerValuesNo       PjsipTimerValues = "no"
	PjsipTimerValuesRequired PjsipTimerValues = "required"
	PjsipTimerValuesYes      PjsipTimerValues = "yes"
)

func (e *PjsipTimerValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTimerValues(s)
	case string:
		*e = PjsipTimerValues(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTimerValues: %T", src)
	}
	return nil
}

type NullPjsipTimerValues struct {
	PjsipTimerValues PjsipTimerValues
	Valid            bool // Valid is true if PjsipTimerValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTimerValues) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTimerValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTimerValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTimerValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTimerValues), nil
}

type PjsipTransportMethodValuesV2 string

const (
	PjsipTransportMethodValuesV2Default     PjsipTransportMethodValuesV2 = "default"
	PjsipTransportMethodValuesV2Unspecified PjsipTransportMethodValuesV2 = "unspecified"
	PjsipTransportMethodValuesV2Tlsv1       PjsipTransportMethodValuesV2 = "tlsv1"
	PjsipTransportMethodValuesV2Tlsv11      PjsipTransportMethodValuesV2 = "tlsv1_1"
	PjsipTransportMethodValuesV2Tlsv12      PjsipTransportMethodValuesV2 = "tlsv1_2"
	PjsipTransportMethodValuesV2Tlsv13      PjsipTransportMethodValuesV2 = "tlsv1_3"
	PjsipTransportMethodValuesV2Sslv2       PjsipTransportMethodValuesV2 = "sslv2"
	PjsipTransportMethodValuesV2Sslv23      PjsipTransportMethodValuesV2 = "sslv23"
	PjsipTransportMethodValuesV2Sslv3       PjsipTransportMethodValuesV2 = "sslv3"
)

func (e *PjsipTransportMethodValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTransportMethodValuesV2(s)
	case string:
		*e = PjsipTransportMethodValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTransportMethodValuesV2: %T", src)
	}
	return nil
}

type NullPjsipTransportMethodValuesV2 struct {
	PjsipTransportMethodValuesV2 PjsipTransportMethodValuesV2
	Valid                        bool // Valid is true if PjsipTransportMethodValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTransportMethodValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTransportMethodValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTransportMethodValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTransportMethodValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTransportMethodValuesV2), nil
}

type PjsipTransportProtocolValuesV2 string

const (
	PjsipTransportProtocolValuesV2Udp  PjsipTransportProtocolValuesV2 = "udp"
	PjsipTransportProtocolValuesV2Tcp  PjsipTransportProtocolValuesV2 = "tcp"
	PjsipTransportProtocolValuesV2Tls  PjsipTransportProtocolValuesV2 = "tls"
	PjsipTransportProtocolValuesV2Ws   PjsipTransportProtocolValuesV2 = "ws"
	PjsipTransportProtocolValuesV2Wss  PjsipTransportProtocolValuesV2 = "wss"
	PjsipTransportProtocolValuesV2Flow PjsipTransportProtocolValuesV2 = "flow"
)

func (e *PjsipTransportProtocolValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PjsipTransportProtocolValuesV2(s)
	case string:
		*e = PjsipTransportProtocolValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for PjsipTransportProtocolValuesV2: %T", src)
	}
	return nil
}

type NullPjsipTransportProtocolValuesV2 struct {
	PjsipTransportProtocolValuesV2 PjsipTransportProtocolValuesV2
	Valid                          bool // Valid is true if PjsipTransportProtocolValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPjsipTransportProtocolValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.PjsipTransportProtocolValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PjsipTransportProtocolValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPjsipTransportProtocolValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PjsipTransportProtocolValuesV2), nil
}

type QueueAutopauseValues string

const (
	QueueAutopauseValuesYes QueueAutopauseValues = "yes"
	QueueAutopauseValuesNo  QueueAutopauseValues = "no"
	QueueAutopauseValuesAll QueueAutopauseValues = "all"
)

func (e *QueueAutopauseValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QueueAutopauseValues(s)
	case string:
		*e = QueueAutopauseValues(s)
	default:
		return fmt.Errorf("unsupported scan type for QueueAutopauseValues: %T", src)
	}
	return nil
}

type NullQueueAutopauseValues struct {
	QueueAutopauseValues QueueAutopauseValues
	Valid                bool // Valid is true if QueueAutopauseValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQueueAutopauseValues) Scan(value interface{}) error {
	if value == nil {
		ns.QueueAutopauseValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QueueAutopauseValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQueueAutopauseValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QueueAutopauseValues), nil
}

type QueueStrategyValues string

const (
	QueueStrategyValuesRingall     QueueStrategyValues = "ringall"
	QueueStrategyValuesLeastrecent QueueStrategyValues = "leastrecent"
	QueueStrategyValuesFewestcalls QueueStrategyValues = "fewestcalls"
	QueueStrategyValuesRandom      QueueStrategyValues = "random"
	QueueStrategyValuesRrmemory    QueueStrategyValues = "rrmemory"
	QueueStrategyValuesLinear      QueueStrategyValues = "linear"
	QueueStrategyValuesWrandom     QueueStrategyValues = "wrandom"
	QueueStrategyValuesRrordered   QueueStrategyValues = "rrordered"
)

func (e *QueueStrategyValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QueueStrategyValues(s)
	case string:
		*e = QueueStrategyValues(s)
	default:
		return fmt.Errorf("unsupported scan type for QueueStrategyValues: %T", src)
	}
	return nil
}

type NullQueueStrategyValues struct {
	QueueStrategyValues QueueStrategyValues
	Valid               bool // Valid is true if QueueStrategyValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQueueStrategyValues) Scan(value interface{}) error {
	if value == nil {
		ns.QueueStrategyValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QueueStrategyValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQueueStrategyValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QueueStrategyValues), nil
}

type SecurityNegotiationValues string

const (
	SecurityNegotiationValuesNo       SecurityNegotiationValues = "no"
	SecurityNegotiationValuesMediasec SecurityNegotiationValues = "mediasec"
)

func (e *SecurityNegotiationValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SecurityNegotiationValues(s)
	case string:
		*e = SecurityNegotiationValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SecurityNegotiationValues: %T", src)
	}
	return nil
}

type NullSecurityNegotiationValues struct {
	SecurityNegotiationValues SecurityNegotiationValues
	Valid                     bool // Valid is true if SecurityNegotiationValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSecurityNegotiationValues) Scan(value interface{}) error {
	if value == nil {
		ns.SecurityNegotiationValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SecurityNegotiationValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSecurityNegotiationValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SecurityNegotiationValues), nil
}

type ShaHashValues string

const (
	ShaHashValuesSHA1   ShaHashValues = "SHA-1"
	ShaHashValuesSHA256 ShaHashValues = "SHA-256"
)

func (e *ShaHashValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShaHashValues(s)
	case string:
		*e = ShaHashValues(s)
	default:
		return fmt.Errorf("unsupported scan type for ShaHashValues: %T", src)
	}
	return nil
}

type NullShaHashValues struct {
	ShaHashValues ShaHashValues
	Valid         bool // Valid is true if ShaHashValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShaHashValues) Scan(value interface{}) error {
	if value == nil {
		ns.ShaHashValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShaHashValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShaHashValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShaHashValues), nil
}

type SipCallingpresValues string

const (
	SipCallingpresValuesAllowedNotScreened  SipCallingpresValues = "allowed_not_screened"
	SipCallingpresValuesAllowedPassedScreen SipCallingpresValues = "allowed_passed_screen"
	SipCallingpresValuesAllowedFailedScreen SipCallingpresValues = "allowed_failed_screen"
	SipCallingpresValuesAllowed             SipCallingpresValues = "allowed"
	SipCallingpresValuesProhibNotScreened   SipCallingpresValues = "prohib_not_screened"
	SipCallingpresValuesProhibPassedScreen  SipCallingpresValues = "prohib_passed_screen"
	SipCallingpresValuesProhibFailedScreen  SipCallingpresValues = "prohib_failed_screen"
	SipCallingpresValuesProhib              SipCallingpresValues = "prohib"
)

func (e *SipCallingpresValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipCallingpresValues(s)
	case string:
		*e = SipCallingpresValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipCallingpresValues: %T", src)
	}
	return nil
}

type NullSipCallingpresValues struct {
	SipCallingpresValues SipCallingpresValues
	Valid                bool // Valid is true if SipCallingpresValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipCallingpresValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipCallingpresValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipCallingpresValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipCallingpresValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipCallingpresValues), nil
}

type SipDirectmediaValuesV2 string

const (
	SipDirectmediaValuesV2Yes      SipDirectmediaValuesV2 = "yes"
	SipDirectmediaValuesV2No       SipDirectmediaValuesV2 = "no"
	SipDirectmediaValuesV2Nonat    SipDirectmediaValuesV2 = "nonat"
	SipDirectmediaValuesV2Update   SipDirectmediaValuesV2 = "update"
	SipDirectmediaValuesV2Outgoing SipDirectmediaValuesV2 = "outgoing"
)

func (e *SipDirectmediaValuesV2) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipDirectmediaValuesV2(s)
	case string:
		*e = SipDirectmediaValuesV2(s)
	default:
		return fmt.Errorf("unsupported scan type for SipDirectmediaValuesV2: %T", src)
	}
	return nil
}

type NullSipDirectmediaValuesV2 struct {
	SipDirectmediaValuesV2 SipDirectmediaValuesV2
	Valid                  bool // Valid is true if SipDirectmediaValuesV2 is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipDirectmediaValuesV2) Scan(value interface{}) error {
	if value == nil {
		ns.SipDirectmediaValuesV2, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipDirectmediaValuesV2.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipDirectmediaValuesV2) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipDirectmediaValuesV2), nil
}

type SipDtmfmodeValues string

const (
	SipDtmfmodeValuesRfc2833   SipDtmfmodeValues = "rfc2833"
	SipDtmfmodeValuesInfo      SipDtmfmodeValues = "info"
	SipDtmfmodeValuesShortinfo SipDtmfmodeValues = "shortinfo"
	SipDtmfmodeValuesInband    SipDtmfmodeValues = "inband"
	SipDtmfmodeValuesAuto      SipDtmfmodeValues = "auto"
)

func (e *SipDtmfmodeValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipDtmfmodeValues(s)
	case string:
		*e = SipDtmfmodeValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipDtmfmodeValues: %T", src)
	}
	return nil
}

type NullSipDtmfmodeValues struct {
	SipDtmfmodeValues SipDtmfmodeValues
	Valid             bool // Valid is true if SipDtmfmodeValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipDtmfmodeValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipDtmfmodeValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipDtmfmodeValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipDtmfmodeValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipDtmfmodeValues), nil
}

type SipProgressinbandValues string

const (
	SipProgressinbandValuesYes   SipProgressinbandValues = "yes"
	SipProgressinbandValuesNo    SipProgressinbandValues = "no"
	SipProgressinbandValuesNever SipProgressinbandValues = "never"
)

func (e *SipProgressinbandValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipProgressinbandValues(s)
	case string:
		*e = SipProgressinbandValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipProgressinbandValues: %T", src)
	}
	return nil
}

type NullSipProgressinbandValues struct {
	SipProgressinbandValues SipProgressinbandValues
	Valid                   bool // Valid is true if SipProgressinbandValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipProgressinbandValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipProgressinbandValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipProgressinbandValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipProgressinbandValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipProgressinbandValues), nil
}

type SipSessionRefresherValues string

const (
	SipSessionRefresherValuesUac SipSessionRefresherValues = "uac"
	SipSessionRefresherValuesUas SipSessionRefresherValues = "uas"
)

func (e *SipSessionRefresherValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipSessionRefresherValues(s)
	case string:
		*e = SipSessionRefresherValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipSessionRefresherValues: %T", src)
	}
	return nil
}

type NullSipSessionRefresherValues struct {
	SipSessionRefresherValues SipSessionRefresherValues
	Valid                     bool // Valid is true if SipSessionRefresherValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipSessionRefresherValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipSessionRefresherValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipSessionRefresherValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipSessionRefresherValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipSessionRefresherValues), nil
}

type SipSessionTimersValues string

const (
	SipSessionTimersValuesAccept    SipSessionTimersValues = "accept"
	SipSessionTimersValuesRefuse    SipSessionTimersValues = "refuse"
	SipSessionTimersValuesOriginate SipSessionTimersValues = "originate"
)

func (e *SipSessionTimersValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipSessionTimersValues(s)
	case string:
		*e = SipSessionTimersValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipSessionTimersValues: %T", src)
	}
	return nil
}

type NullSipSessionTimersValues struct {
	SipSessionTimersValues SipSessionTimersValues
	Valid                  bool // Valid is true if SipSessionTimersValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipSessionTimersValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipSessionTimersValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipSessionTimersValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipSessionTimersValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipSessionTimersValues), nil
}

type SipTransportValues string

const (
	SipTransportValuesUdp    SipTransportValues = "udp"
	SipTransportValuesTcp    SipTransportValues = "tcp"
	SipTransportValuesTls    SipTransportValues = "tls"
	SipTransportValuesWs     SipTransportValues = "ws"
	SipTransportValuesWss    SipTransportValues = "wss"
	SipTransportValuesUdptcp SipTransportValues = "udp,tcp"
	SipTransportValuesTcpudp SipTransportValues = "tcp,udp"
)

func (e *SipTransportValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SipTransportValues(s)
	case string:
		*e = SipTransportValues(s)
	default:
		return fmt.Errorf("unsupported scan type for SipTransportValues: %T", src)
	}
	return nil
}

type NullSipTransportValues struct {
	SipTransportValues SipTransportValues
	Valid              bool // Valid is true if SipTransportValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSipTransportValues) Scan(value interface{}) error {
	if value == nil {
		ns.SipTransportValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SipTransportValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSipTransportValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SipTransportValues), nil
}

type TypeValues string

const (
	TypeValuesFriend TypeValues = "friend"
	TypeValuesUser   TypeValues = "user"
	TypeValuesPeer   TypeValues = "peer"
)

func (e *TypeValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeValues(s)
	case string:
		*e = TypeValues(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeValues: %T", src)
	}
	return nil
}

type NullTypeValues struct {
	TypeValues TypeValues
	Valid      bool // Valid is true if TypeValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeValues) Scan(value interface{}) error {
	if value == nil {
		ns.TypeValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeValues), nil
}

type YesNoValues string

const (
	YesNoValuesYes YesNoValues = "yes"
	YesNoValuesNo  YesNoValues = "no"
)

func (e *YesNoValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = YesNoValues(s)
	case string:
		*e = YesNoValues(s)
	default:
		return fmt.Errorf("unsupported scan type for YesNoValues: %T", src)
	}
	return nil
}

type NullYesNoValues struct {
	YesNoValues YesNoValues
	Valid       bool // Valid is true if YesNoValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullYesNoValues) Scan(value interface{}) error {
	if value == nil {
		ns.YesNoValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.YesNoValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullYesNoValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.YesNoValues), nil
}

type YesnoValues string

const (
	YesnoValuesYes YesnoValues = "yes"
	YesnoValuesNo  YesnoValues = "no"
)

func (e *YesnoValues) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = YesnoValues(s)
	case string:
		*e = YesnoValues(s)
	default:
		return fmt.Errorf("unsupported scan type for YesnoValues: %T", src)
	}
	return nil
}

type NullYesnoValues struct {
	YesnoValues YesnoValues
	Valid       bool // Valid is true if YesnoValues is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullYesnoValues) Scan(value interface{}) error {
	if value == nil {
		ns.YesnoValues, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.YesnoValues.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullYesnoValues) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.YesnoValues), nil
}

type AlembicVersion struct {
	VersionNum string
}

type Cdr struct {
	ID          int64
	Accountcode pgtype.Text
	Src         pgtype.Text
	Dst         pgtype.Text
	Dcontext    pgtype.Text
	Clid        pgtype.Text
	Channel     pgtype.Text
	Dstchannel  pgtype.Text
	Lastapp     pgtype.Text
	Lastdata    pgtype.Text
	Cstart      pgtype.Timestamp
	Answer      pgtype.Timestamp
	Cend        pgtype.Timestamp
	Duration    pgtype.Int4
	Billsec     pgtype.Int4
	Disposition pgtype.Text
	Amaflags    pgtype.Text
	Userfield   pgtype.Text
	Uniqueid    pgtype.Text
	Linkedid    pgtype.Text
	Peeraccount pgtype.Text
	Sequence    pgtype.Int4
}

type Extension struct {
	ID       int64
	Context  string
	Exten    string
	Priority int32
	App      string
	Appdata  string
}

type Iaxfriend struct {
	ID                int32
	Name              string
	Type              NullTypeValues
	Username          pgtype.Text
	Mailbox           pgtype.Text
	Secret            pgtype.Text
	Dbsecret          pgtype.Text
	Context           pgtype.Text
	Regcontext        pgtype.Text
	Host              pgtype.Text
	Ipaddr            pgtype.Text
	Port              pgtype.Int4
	Defaultip         pgtype.Text
	Sourceaddress     pgtype.Text
	Mask              pgtype.Text
	Regexten          pgtype.Text
	Regseconds        pgtype.Int4
	Accountcode       pgtype.Text
	Mohinterpret      pgtype.Text
	Mohsuggest        pgtype.Text
	Inkeys            pgtype.Text
	Outkeys           pgtype.Text
	Language          pgtype.Text
	Callerid          pgtype.Text
	CidNumber         pgtype.Text
	Sendani           NullYesNoValues
	Fullname          pgtype.Text
	Trunk             NullYesNoValues
	Auth              pgtype.Text
	Maxauthreq        pgtype.Int4
	Requirecalltoken  NullIaxRequirecalltokenValues
	Encryption        NullIaxEncryptionValues
	Transfer          NullIaxTransferValues
	Jitterbuffer      NullYesNoValues
	Forcejitterbuffer NullYesNoValues
	Disallow          pgtype.Text
	Allow             pgtype.Text
	Codecpriority     pgtype.Text
	Qualify           pgtype.Text
	Qualifysmoothing  NullYesNoValues
	Qualifyfreqok     pgtype.Text
	Qualifyfreqnotok  pgtype.Text
	Timezone          pgtype.Text
	Adsi              NullYesNoValues
	Amaflags          pgtype.Text
	Setvar            pgtype.Text
}

type Meetme struct {
	Bookid            int32
	Confno            string
	Starttime         pgtype.Timestamp
	Endtime           pgtype.Timestamp
	Pin               pgtype.Text
	Adminpin          pgtype.Text
	Opts              pgtype.Text
	Adminopts         pgtype.Text
	Recordingfilename pgtype.Text
	Recordingformat   pgtype.Text
	Maxusers          pgtype.Int4
	Members           int32
}

type Musiconhold struct {
	Name        string
	Mode        NullMohModeValues
	Directory   pgtype.Text
	Application pgtype.Text
	Digit       pgtype.Text
	Sort        pgtype.Text
	Format      pgtype.Text
	Stamp       pgtype.Timestamp
	LoopLast    NullYesnoValues
}

type MusiconholdEntry struct {
	Name     string
	Position int32
	Entry    string
}

type PsAor struct {
	ID                  string
	Contact             pgtype.Text
	DefaultExpiration   pgtype.Int4
	Mailboxes           pgtype.Text
	MaxContacts         pgtype.Int4
	MinimumExpiration   pgtype.Int4
	RemoveExisting      NullAstBoolValues
	QualifyFrequency    pgtype.Int4
	AuthenticateQualify NullAstBoolValues
	MaximumExpiration   pgtype.Int4
	OutboundProxy       pgtype.Text
	SupportPath         NullAstBoolValues
	QualifyTimeout      pgtype.Float8
	VoicemailExtension  pgtype.Text
	RemoveUnavailable   NullAstBoolValues
}

type PsAsteriskPublication struct {
	ID                  string
	DevicestatePublish  pgtype.Text
	MailboxstatePublish pgtype.Text
	DeviceState         NullAstBoolValues
	DeviceStateFilter   pgtype.Text
	MailboxState        NullAstBoolValues
	MailboxStateFilter  pgtype.Text
}

type PsAuth struct {
	ID            string
	AuthType      NullPjsipAuthTypeValuesV2
	NonceLifetime pgtype.Int4
	Md5Cred       pgtype.Text
	Password      pgtype.Text
	Realm         pgtype.Text
	Username      pgtype.Text
	RefreshToken  pgtype.Text
	OauthClientid pgtype.Text
	OauthSecret   pgtype.Text
}

type PsContact struct {
	ID                  string
	Uri                 pgtype.Text
	ExpirationTime      pgtype.Int8
	QualifyFrequency    pgtype.Int4
	OutboundProxy       pgtype.Text
	Path                pgtype.Text
	UserAgent           pgtype.Text
	QualifyTimeout      pgtype.Float8
	RegServer           pgtype.Text
	AuthenticateQualify NullAstBoolValues
	ViaAddr             pgtype.Text
	ViaPort             pgtype.Int4
	CallID              pgtype.Text
	Endpoint            pgtype.Text
	PruneOnBoot         NullAstBoolValues
}

type PsDomainAlias struct {
	ID     string
	Domain pgtype.Text
}

type PsEndpoint struct {
	ID                              string
	Transport                       pgtype.Text
	Aors                            pgtype.Text
	Auth                            pgtype.Text
	Context                         pgtype.Text
	Disallow                        pgtype.Text
	Allow                           pgtype.Text
	DirectMedia                     NullAstBoolValues
	ConnectedLineMethod             NullPjsipConnectedLineMethodValues
	DirectMediaMethod               NullPjsipConnectedLineMethodValues
	DirectMediaGlareMitigation      NullPjsipDirectMediaGlareMitigationValues
	DisableDirectMediaOnNat         NullAstBoolValues
	DtmfMode                        NullPjsipDtmfModeValuesV3
	ExternalMediaAddress            pgtype.Text
	ForceRport                      NullAstBoolValues
	IceSupport                      NullAstBoolValues
	IdentifyBy                      pgtype.Text
	Mailboxes                       pgtype.Text
	MohSuggest                      pgtype.Text
	OutboundAuth                    pgtype.Text
	OutboundProxy                   pgtype.Text
	RewriteContact                  NullAstBoolValues
	RtpIpv6                         NullAstBoolValues
	RtpSymmetric                    NullAstBoolValues
	SendDiversion                   NullAstBoolValues
	SendPai                         NullAstBoolValues
	SendRpid                        NullAstBoolValues
	TimersMinSe                     pgtype.Int4
	Timers                          NullPjsipTimerValues
	TimersSessExpires               pgtype.Int4
	Callerid                        pgtype.Text
	CalleridPrivacy                 NullPjsipCidPrivacyValues
	CalleridTag                     pgtype.Text
	_100rel                         NullPjsip100relValuesV2
	AggregateMwi                    NullAstBoolValues
	TrustIDInbound                  NullAstBoolValues
	TrustIDOutbound                 NullAstBoolValues
	UsePtime                        NullAstBoolValues
	UseAvpf                         NullAstBoolValues
	MediaEncryption                 NullPjsipMediaEncryptionValues
	InbandProgress                  NullAstBoolValues
	CallGroup                       pgtype.Text
	PickupGroup                     pgtype.Text
	NamedCallGroup                  pgtype.Text
	NamedPickupGroup                pgtype.Text
	DeviceStateBusyAt               pgtype.Int4
	FaxDetect                       NullAstBoolValues
	T38Udptl                        NullAstBoolValues
	T38UdptlEc                      NullPjsipT38udptlEcValues
	T38UdptlMaxdatagram             pgtype.Int4
	T38UdptlNat                     NullAstBoolValues
	T38UdptlIpv6                    NullAstBoolValues
	ToneZone                        pgtype.Text
	Language                        pgtype.Text
	OneTouchRecording               NullAstBoolValues
	RecordOnFeature                 pgtype.Text
	RecordOffFeature                pgtype.Text
	RtpEngine                       pgtype.Text
	AllowTransfer                   NullAstBoolValues
	AllowSubscribe                  NullAstBoolValues
	SdpOwner                        pgtype.Text
	SdpSession                      pgtype.Text
	TosAudio                        pgtype.Text
	TosVideo                        pgtype.Text
	SubMinExpiry                    pgtype.Int4
	FromDomain                      pgtype.Text
	FromUser                        pgtype.Text
	MwiFromUser                     pgtype.Text
	DtlsVerify                      pgtype.Text
	DtlsRekey                       pgtype.Text
	DtlsCertFile                    pgtype.Text
	DtlsPrivateKey                  pgtype.Text
	DtlsCipher                      pgtype.Text
	DtlsCaFile                      pgtype.Text
	DtlsCaPath                      pgtype.Text
	DtlsSetup                       NullPjsipDtlsSetupValues
	SrtpTag32                       NullAstBoolValues
	MediaAddress                    pgtype.Text
	RedirectMethod                  NullPjsipRedirectMethodValues
	SetVar                          pgtype.Text
	CosAudio                        pgtype.Int4
	CosVideo                        pgtype.Int4
	MessageContext                  pgtype.Text
	ForceAvp                        NullAstBoolValues
	MediaUseReceivedTransport       NullAstBoolValues
	Accountcode                     pgtype.Text
	UserEqPhone                     NullAstBoolValues
	MohPassthrough                  NullAstBoolValues
	MediaEncryptionOptimistic       NullAstBoolValues
	RpidImmediate                   NullAstBoolValues
	G726NonStandard                 NullAstBoolValues
	RtpKeepalive                    pgtype.Int4
	RtpTimeout                      pgtype.Int4
	RtpTimeoutHold                  pgtype.Int4
	BindRtpToMediaAddress           NullAstBoolValues
	VoicemailExtension              pgtype.Text
	MwiSubscribeReplacesUnsolicited NullAstBoolValues
	Deny                            pgtype.Text
	Permit                          pgtype.Text
	Acl                             pgtype.Text
	ContactDeny                     pgtype.Text
	ContactPermit                   pgtype.Text
	ContactAcl                      pgtype.Text
	SubscribeContext                pgtype.Text
	FaxDetectTimeout                pgtype.Int4
	ContactUser                     pgtype.Text
	PreferredCodecOnly              NullAstBoolValues
	AsymmetricRtpCodec              NullAstBoolValues
	RtcpMux                         NullAstBoolValues
	AllowOverlap                    NullAstBoolValues
	ReferBlindProgress              NullAstBoolValues
	NotifyEarlyInuseRinging         NullAstBoolValues
	MaxAudioStreams                 pgtype.Int4
	MaxVideoStreams                 pgtype.Int4
	Webrtc                          NullAstBoolValues
	DtlsFingerprint                 NullShaHashValues
	IncomingMwiMailbox              pgtype.Text
	Bundle                          NullAstBoolValues
	DtlsAutoGenerateCert            NullAstBoolValues
	FollowEarlyMediaFork            NullAstBoolValues
	AcceptMultipleSdpAnswers        NullAstBoolValues
	SuppressQ850ReasonHeaders       NullAstBoolValues
	TrustConnectedLine              NullAstBoolValues
	SendConnectedLine               NullAstBoolValues
	Ignore183WithoutSdp             NullAstBoolValues
	CodecPrefsIncomingOffer         pgtype.Text
	CodecPrefsOutgoingOffer         pgtype.Text
	CodecPrefsIncomingAnswer        pgtype.Text
	CodecPrefsOutgoingAnswer        pgtype.Text
	StirShaken                      NullAstBoolValues
	SendHistoryInfo                 NullAstBoolValues
	AllowUnauthenticatedOptions     NullAstBoolValues
	T38BindUdptlToMediaAddress      NullAstBoolValues
	GeolocIncomingCallProfile       pgtype.Text
	GeolocOutgoingCallProfile       pgtype.Text
	IncomingCallOfferPref           NullPjsipIncomingCallOfferPrefValues
	OutgoingCallOfferPref           NullPjsipOutgoingCallOfferPrefValues
	StirShakenProfile               pgtype.Text
	SecurityNegotiation             NullSecurityNegotiationValues
	SecurityMechanisms              pgtype.Text
	SendAoc                         NullAstBoolValues
	OverlapContext                  pgtype.Text
}

type PsEndpointIDIp struct {
	ID              string
	Endpoint        pgtype.Text
	Match           pgtype.Text
	SrvLookups      NullAstBoolValues
	MatchHeader     pgtype.Text
	MatchRequestUri pgtype.Text
}

type PsGlobal struct {
	ID                                    string
	MaxForwards                           pgtype.Int4
	UserAgent                             pgtype.Text
	DefaultOutboundEndpoint               pgtype.Text
	Debug                                 pgtype.Text
	EndpointIdentifierOrder               pgtype.Text
	MaxInitialQualifyTime                 pgtype.Int4
	DefaultFromUser                       pgtype.Text
	KeepAliveInterval                     pgtype.Int4
	Regcontext                            pgtype.Text
	ContactExpirationCheckInterval        pgtype.Int4
	DefaultVoicemailExtension             pgtype.Text
	DisableMultiDomain                    NullAstBoolValues
	UnidentifiedRequestCount              pgtype.Int4
	UnidentifiedRequestPeriod             pgtype.Int4
	UnidentifiedRequestPruneInterval      pgtype.Int4
	DefaultRealm                          pgtype.Text
	MwiTpsQueueHigh                       pgtype.Int4
	MwiTpsQueueLow                        pgtype.Int4
	MwiDisableInitialUnsolicited          NullAstBoolValues
	IgnoreUriUserOptions                  NullAstBoolValues
	UseCalleridContact                    NullAstBoolValues
	SendContactStatusOnUpdateRegistration NullAstBoolValues
	TaskprocessorOverloadTrigger          NullPjsipTaskprocessorOverloadTriggerValues
	Norefersub                            NullAstBoolValues
	AllowSending180After183               NullAstBoolValues
	AllCodecsOnEmptyReinvite              NullAstBoolValues
}

type PsInboundPublication struct {
	ID                       string
	Endpoint                 pgtype.Text
	EventAsteriskDevicestate pgtype.Text
	EventAsteriskMwi         pgtype.Text
}

type PsOutboundPublish struct {
	ID              string
	Expiration      pgtype.Int4
	OutboundAuth    pgtype.Text
	OutboundProxy   pgtype.Text
	ServerUri       pgtype.Text
	FromUri         pgtype.Text
	ToUri           pgtype.Text
	Event           pgtype.Text
	MaxAuthAttempts pgtype.Int4
	Transport       pgtype.Text
	MultiUser       NullAstBoolValues
	Body            pgtype.Text
	Context         pgtype.Text
	Exten           pgtype.Text
}

type PsRegistration struct {
	ID                     string
	AuthRejectionPermanent NullAstBoolValues
	ClientUri              pgtype.Text
	ContactUser            pgtype.Text
	Expiration             pgtype.Int4
	MaxRetries             pgtype.Int4
	OutboundAuth           pgtype.Text
	OutboundProxy          pgtype.Text
	RetryInterval          pgtype.Int4
	ForbiddenRetryInterval pgtype.Int4
	ServerUri              pgtype.Text
	Transport              pgtype.Text
	SupportPath            NullAstBoolValues
	FatalRetryInterval     pgtype.Int4
	Line                   NullAstBoolValues
	Endpoint               pgtype.Text
	SupportOutbound        NullAstBoolValues
	ContactHeaderParams    pgtype.Text
	MaxRandomInitialDelay  pgtype.Int4
	SecurityNegotiation    NullSecurityNegotiationValues
	SecurityMechanisms     pgtype.Text
	UserAgent              pgtype.Text
}

type PsResourceList struct {
	ID                        string
	ListItem                  pgtype.Text
	Event                     pgtype.Text
	FullState                 NullAstBoolValues
	NotificationBatchInterval pgtype.Int4
	ResourceDisplayName       NullAstBoolValues
}

type PsSubscriptionPersistence struct {
	ID           string
	Packet       pgtype.Text
	SrcName      pgtype.Text
	SrcPort      pgtype.Int4
	TransportKey pgtype.Text
	LocalName    pgtype.Text
	LocalPort    pgtype.Int4
	Cseq         pgtype.Int4
	Tag          pgtype.Text
	Endpoint     pgtype.Text
	Expires      pgtype.Int4
	ContactUri   pgtype.Text
	PruneOnBoot  NullAstBoolValues
}

type PsSystem struct {
	ID                       string
	TimerT1                  pgtype.Int4
	TimerB                   pgtype.Int4
	CompactHeaders           NullAstBoolValues
	ThreadpoolInitialSize    pgtype.Int4
	ThreadpoolAutoIncrement  pgtype.Int4
	ThreadpoolIdleTimeout    pgtype.Int4
	ThreadpoolMaxSize        pgtype.Int4
	DisableTcpSwitch         NullAstBoolValues
	FollowEarlyMediaFork     NullAstBoolValues
	AcceptMultipleSdpAnswers NullAstBoolValues
	DisableRport             NullAstBoolValues
}

type PsTransport struct {
	ID                       string
	AsyncOperations          pgtype.Int4
	Bind                     pgtype.Text
	CaListFile               pgtype.Text
	CertFile                 pgtype.Text
	Cipher                   pgtype.Text
	Domain                   pgtype.Text
	ExternalMediaAddress     pgtype.Text
	ExternalSignalingAddress pgtype.Text
	ExternalSignalingPort    pgtype.Int4
	Method                   NullPjsipTransportMethodValuesV2
	LocalNet                 pgtype.Text
	Password                 pgtype.Text
	PrivKeyFile              pgtype.Text
	Protocol                 NullPjsipTransportProtocolValuesV2
	RequireClientCert        NullAstBoolValues
	VerifyClient             NullAstBoolValues
	VerifyServer             NullAstBoolValues
	Tos                      pgtype.Text
	Cos                      pgtype.Int4
	AllowReload              NullAstBoolValues
	SymmetricTransport       NullAstBoolValues
	AllowWildcardCerts       NullAstBoolValues
	TcpKeepaliveEnable       pgtype.Bool
	TcpKeepaliveIdleTime     pgtype.Int4
	TcpKeepaliveIntervalTime pgtype.Int4
	TcpKeepaliveProbeCount   pgtype.Int4
}

type Queue struct {
	Name                      string
	Musiconhold               pgtype.Text
	Announce                  pgtype.Text
	Context                   pgtype.Text
	Timeout                   pgtype.Int4
	Ringinuse                 NullYesnoValues
	Setinterfacevar           NullYesnoValues
	Setqueuevar               NullYesnoValues
	Setqueueentryvar          NullYesnoValues
	MonitorFormat             pgtype.Text
	Membermacro               pgtype.Text
	Membergosub               pgtype.Text
	QueueYouarenext           pgtype.Text
	QueueThereare             pgtype.Text
	QueueCallswaiting         pgtype.Text
	QueueQuantity1            pgtype.Text
	QueueQuantity2            pgtype.Text
	QueueHoldtime             pgtype.Text
	QueueMinutes              pgtype.Text
	QueueMinute               pgtype.Text
	QueueSeconds              pgtype.Text
	QueueThankyou             pgtype.Text
	QueueCallerannounce       pgtype.Text
	QueueReporthold           pgtype.Text
	AnnounceFrequency         pgtype.Int4
	AnnounceToFirstUser       NullYesnoValues
	MinAnnounceFrequency      pgtype.Int4
	AnnounceRoundSeconds      pgtype.Int4
	AnnounceHoldtime          pgtype.Text
	AnnouncePosition          pgtype.Text
	AnnouncePositionLimit     pgtype.Int4
	PeriodicAnnounce          pgtype.Text
	PeriodicAnnounceFrequency pgtype.Int4
	RelativePeriodicAnnounce  NullYesnoValues
	RandomPeriodicAnnounce    NullYesnoValues
	Retry                     pgtype.Int4
	Wrapuptime                pgtype.Int4
	Penaltymemberslimit       pgtype.Int4
	Autofill                  NullYesnoValues
	MonitorType               pgtype.Text
	Autopause                 NullQueueAutopauseValues
	Autopausedelay            pgtype.Int4
	Autopausebusy             NullYesnoValues
	Autopauseunavail          NullYesnoValues
	Maxlen                    pgtype.Int4
	Servicelevel              pgtype.Int4
	Strategy                  NullQueueStrategyValues
	Joinempty                 pgtype.Text
	Leavewhenempty            pgtype.Text
	Reportholdtime            NullYesnoValues
	Memberdelay               pgtype.Int4
	Weight                    pgtype.Int4
	Timeoutrestart            NullYesnoValues
	Defaultrule               pgtype.Text
	Timeoutpriority           pgtype.Text
}

type QueueMember struct {
	QueueName      string
	Interface      string
	Membername     pgtype.Text
	StateInterface pgtype.Text
	Penalty        pgtype.Int4
	Paused         pgtype.Int4
	Uniqueid       int32
	Wrapuptime     pgtype.Int4
	Ringinuse      NullAstBoolValues
	ReasonPaused   pgtype.Text
}

type QueueRule struct {
	RuleName   string
	Time       string
	MinPenalty string
	MaxPenalty string
}

type Sippeer struct {
	ID                int32
	Name              string
	Ipaddr            pgtype.Text
	Port              pgtype.Int4
	Regseconds        pgtype.Int4
	Defaultuser       pgtype.Text
	Fullcontact       pgtype.Text
	Regserver         pgtype.Text
	Useragent         pgtype.Text
	Lastms            pgtype.Int4
	Host              pgtype.Text
	Type              NullTypeValues
	Context           pgtype.Text
	Permit            pgtype.Text
	Deny              pgtype.Text
	Secret            pgtype.Text
	Md5secret         pgtype.Text
	Remotesecret      pgtype.Text
	Transport         NullSipTransportValues
	Dtmfmode          NullSipDtmfmodeValues
	Directmedia       NullSipDirectmediaValuesV2
	Nat               pgtype.Text
	Callgroup         pgtype.Text
	Pickupgroup       pgtype.Text
	Language          pgtype.Text
	Disallow          pgtype.Text
	Allow             pgtype.Text
	Insecure          pgtype.Text
	Trustrpid         NullYesNoValues
	Progressinband    NullSipProgressinbandValues
	Promiscredir      NullYesNoValues
	Useclientcode     NullYesNoValues
	Accountcode       pgtype.Text
	Setvar            pgtype.Text
	Callerid          pgtype.Text
	Amaflags          pgtype.Text
	Callcounter       NullYesNoValues
	Busylevel         pgtype.Int4
	Allowoverlap      NullYesNoValues
	Allowsubscribe    NullYesNoValues
	Videosupport      NullYesNoValues
	Maxcallbitrate    pgtype.Int4
	Rfc2833compensate NullYesNoValues
	Mailbox           pgtype.Text
	SessionTimers     NullSipSessionTimersValues
	SessionExpires    pgtype.Int4
	SessionMinse      pgtype.Int4
	SessionRefresher  NullSipSessionRefresherValues
	T38ptUsertpsource pgtype.Text
	Regexten          pgtype.Text
	Fromdomain        pgtype.Text
	Fromuser          pgtype.Text
	Qualify           pgtype.Text
	Defaultip         pgtype.Text
	Rtptimeout        pgtype.Int4
	Rtpholdtimeout    pgtype.Int4
	Sendrpid          NullYesNoValues
	Outboundproxy     pgtype.Text
	Callbackextension pgtype.Text
	Timert1           pgtype.Int4
	Timerb            pgtype.Int4
	Qualifyfreq       pgtype.Int4
	Constantssrc      NullYesNoValues
	Contactpermit     pgtype.Text
	Contactdeny       pgtype.Text
	Usereqphone       NullYesNoValues
	Textsupport       NullYesNoValues
	Faxdetect         NullYesNoValues
	Buggymwi          NullYesNoValues
	Auth              pgtype.Text
	Fullname          pgtype.Text
	Trunkname         pgtype.Text
	CidNumber         pgtype.Text
	Callingpres       NullSipCallingpresValues
	Mohinterpret      pgtype.Text
	Mohsuggest        pgtype.Text
	Parkinglot        pgtype.Text
	Hasvoicemail      NullYesNoValues
	Subscribemwi      NullYesNoValues
	Vmexten           pgtype.Text
	Autoframing       NullYesNoValues
	Rtpkeepalive      pgtype.Int4
	CallLimit         pgtype.Int4
	G726nonstandard   NullYesNoValues
	Ignoresdpversion  NullYesNoValues
	Allowtransfer     NullYesNoValues
	Dynamic           NullYesNoValues
	Path              pgtype.Text
	Supportpath       NullYesNoValues
}

type StirTn struct {
	ID             string
	PrivateKeyFile pgtype.Text
	PublicCertUrl  pgtype.Text
	AttestLevel    pgtype.Text
	SendMky        NullAstBoolValues
}

type Voicemail struct {
	Uniqueid        int32
	Context         string
	Mailbox         string
	Password        string
	Fullname        pgtype.Text
	Alias           pgtype.Text
	Email           pgtype.Text
	Pager           pgtype.Text
	Attach          NullYesNoValues
	Attachfmt       pgtype.Text
	Serveremail     pgtype.Text
	Language        pgtype.Text
	Tz              pgtype.Text
	Deletevoicemail NullYesNoValues
	Saycid          NullYesNoValues
	Sendvoicemail   NullYesNoValues
	Review          NullYesNoValues
	Tempgreetwarn   NullYesNoValues
	Operator        NullYesNoValues
	Envelope        NullYesNoValues
	Sayduration     pgtype.Int4
	Forcename       NullYesNoValues
	Forcegreetings  NullYesNoValues
	Callback        pgtype.Text
	Dialout         pgtype.Text
	Exitcontext     pgtype.Text
	Maxmsg          pgtype.Int4
	Volgain         pgtype.Numeric
	Imapuser        pgtype.Text
	Imappassword    pgtype.Text
	Imapserver      pgtype.Text
	Imapport        pgtype.Text
	Imapflags       pgtype.Text
	Stamp           pgtype.Timestamp
}
